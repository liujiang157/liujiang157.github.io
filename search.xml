<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>用JAVA实现一个IMDB数据解析器</title>
      <link href="2021/03/31/%E7%94%A8JAVA%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAIMDB%E6%95%B0%E6%8D%AE%E8%A7%A3%E6%9E%90%E5%99%A8/"/>
      <url>2021/03/31/%E7%94%A8JAVA%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAIMDB%E6%95%B0%E6%8D%AE%E8%A7%A3%E6%9E%90%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>在IMDB数据库中，至少有2000万条数据可以查询。在使用这些数据之前还有许多前置工作需要完成。</p><h3 id="数据库文件"><a href="#数据库文件" class="headerlink" title="数据库文件"></a>数据库文件</h3><p>我们只取120行的样例数据来测试我们的解析器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line">Andre, KentThe Mask: The Origin (1995) (VG)  (voice)</span><br><span class="line"></span><br><span class="line">Andre, KevinCome Fly with Us (1974)  [Tony]  &lt;4&gt;</span><br><span class="line">Deep Throat Part II (1974)  (as Carter Courtney Jr.)  [Russian Agent]  &lt;8&gt;</span><br><span class="line">Fringe Benefits (1974)  [Dr. Charles Cherrypopper]  &lt;1&gt;</span><br><span class="line">Invasion of the Love Drones (1977)  [Pseudo Drone]  &lt;26&gt;</span><br><span class="line">Is There Sex After Death? (1971)  (as Carter Courtney Jr.)  [Sex Bowl Contestant]  &lt;82&gt;</span><br><span class="line">Lady on the Couch (1974)  [Dr. Miller]</span><br><span class="line">Naked Came the Stranger (1975)  [Party Guy with Candle]  &lt;6&gt;</span><br><span class="line">Sex Fantasies (1975)</span><br><span class="line">Stigma (1972)  (as Carter Courtney)  [Homosexual]  &lt;10&gt;</span><br><span class="line">Teenage Hitchhikers (1975)  (as Carter Courtney Jr.)  [Farquart (Bruce)]  &lt;8&gt;</span><br><span class="line">The $50,000 Climax Show (1975)  (as Kevin Andre Darby)</span><br><span class="line">The Big Con (1975)  (as Carter Courtney)  [Sam Browne]  &lt;7&gt;</span><br><span class="line">The Defiance of Good (1975)  [Dr. Hirsch]  &lt;8&gt;</span><br><span class="line">The Love Bus (1974)  (as Kevin André)  [Ralph Kramden]  &lt;7&gt;</span><br><span class="line">The Mount of Venus (1975)  (as Kevin André)  [Bacchus]  &lt;5&gt;</span><br><span class="line">The New York City Woman (1977)  (archive footage) (uncredited)  [Dr. Chartop]</span><br><span class="line">The Passions of Carol (1975)  (as Kevin André)  [The Spirits]  &lt;5&gt;</span><br><span class="line">The Private Afternoons of Pamela Mann (1974)  [Frank&#39;s First Client]  &lt;6&gt;</span><br><span class="line">The Switch or How to Alter Your Ego (1974)  [Seymour]  &lt;17&gt;</span><br><span class="line">Whatever Happened to Miss September? (1973)  (as Knah-Knah)  [Bentley]</span><br><span class="line"></span><br><span class="line">Andre, KurtMy Politics, My Country (2012)</span><br><span class="line">World Bender (2014)  [Network Executive]  &lt;8&gt;</span><br><span class="line"></span><br><span class="line">Andre, L.J.&quot;Disneyland&quot; (1954) &#123;Willie and the Yank: The Deserter (#13.15)&#125;  [Uncle Ferd]  &lt;10&gt;</span><br><span class="line">&quot;Disneyland&quot; (1954) &#123;Willie and the Yank: The Mosby Raiders (#13.16)&#125;  [Uncle Ferd]  &lt;10&gt;</span><br><span class="line"></span><br><span class="line">Andre, LeClercStreetSmart Guide (2014) (V)  [Himself - Guest]</span><br><span class="line">&quot;Laughs&quot; (2014) &#123;(#1.22)&#125;</span><br><span class="line">&quot;Laughs&quot; (2014) &#123;(#1.5)&#125;  [Himself]</span><br><span class="line"></span><br><span class="line">Andre, Lorin-PierreCirque du Soleil: Worlds Away (2012)  [Viva Elvis Cast Member]  &lt;198&gt;</span><br><span class="line">The Neighborhood Ball: An Inauguration Celebration (2009) (TV)  [Antigravity Performer]</span><br><span class="line"></span><br><span class="line">Andre, LukkaArmando Rene: Start Running (2015) (V)</span><br><span class="line">Making of Salir Corriendo (2015)  (archive footage)</span><br><span class="line"></span><br><span class="line">Andre, MandiMemoirs of a Lifeguard (2010)</span><br><span class="line"></span><br><span class="line">Andre, MarcusThe Grad Film (2015)  [Rob]</span><br><span class="line"></span><br><span class="line">Andre, Mario (I)Love Your Mama (1990)  [Bartender]</span><br><span class="line"></span><br><span class="line">Andre, Mario (II)Market Value (2016)  [Triage Patient]</span><br><span class="line">The Breakout Dream (2015)  [Pastor Mark]</span><br><span class="line">The Penny (2010)  [Darrell Watts]  &lt;6&gt;</span><br><span class="line"></span><br><span class="line">Andre, Mario (III)Blactose Intolerance (2015)  [Pa Pa]</span><br><span class="line">Life Outside the Rhyme (2016)  [The Muffin Man]</span><br><span class="line">Preacher Man (2015)  [Elder Jones]  &lt;4&gt;</span><br><span class="line">School for Gods (????)  [St. Louis Cartel]</span><br><span class="line">Under Pressure (2016)  [Uncle Ray]</span><br><span class="line">&quot;The Natural&quot; (2016)  [The Manager]</span><br><span class="line"></span><br><span class="line">Andre, MartinVasilissa maimou (2000)</span><br><span class="line"></span><br><span class="line">Andre, Mat (I)Lights Camera Blood! (2015)  [Hank the Hobo]</span><br><span class="line">&quot;Todd and the Book of Pure Evil&quot; (2010) &#123;B.Y.O.B.O.P.E. (#2.11)&#125;  [Dancerman]  &lt;18&gt;</span><br><span class="line"></span><br><span class="line">Andre, Mathias (II)Guilty Pleasures (2016) (TV)  [Groomer 3]  &lt;26&gt;</span><br><span class="line"></span><br><span class="line">Andre, MatthewSanta Rosa (2004) (V)</span><br><span class="line"></span><br><span class="line">Andre, Michael (II)&quot;Here 2 Help&quot; (2011) &#123;(#1.2)&#125;  [Himself]  &lt;3&gt;</span><br><span class="line">&quot;Here 2 Help&quot; (2011) &#123;(#1.3)&#125;  [Himself]  &lt;2&gt;</span><br><span class="line">&quot;Here 2 Help&quot; (2011) &#123;(#1.4)&#125;  [Himself]  &lt;2&gt;</span><br><span class="line">&quot;Here 2 Help&quot; (2011) &#123;(#1.5)&#125;  [Himself]  &lt;2&gt;</span><br><span class="line">&quot;Here 2 Help&quot; (2011) &#123;(#1.6)&#125;  [Himself]  &lt;2&gt;</span><br><span class="line">&quot;Peter Andre: My Life&quot; (2011) &#123;(#1.2)&#125;  [Himself]</span><br><span class="line">&quot;Peter Andre: My Life&quot; (2011) &#123;(#1.3)&#125;  [Himself]</span><br><span class="line">&quot;Peter Andre: My Life&quot; (2011) &#123;(#1.4)&#125;  [Himself]</span><br><span class="line">&quot;Peter Andre: My Life&quot; (2011) &#123;(#1.5)&#125;  [Himself]</span><br><span class="line">&quot;Peter Andre: My Life&quot; (2011) &#123;(#3.4)&#125;  [Himself]</span><br><span class="line">&quot;Peter Andre: My Life&quot; (2011) &#123;(#3.5)&#125;  [Himself]</span><br><span class="line">&quot;Peter Andre: My Life&quot; (2011) &#123;He&#39;s Found His Happy Ever After (#5.4)&#125;  [Himself]</span><br><span class="line">&quot;Peter Andre: My Life&quot; (2011) &#123;I Can&#39;t Remember When I Was 15 (#4.4)&#125;  [Himself]</span><br><span class="line">&quot;Peter Andre: My Life&quot; (2011) &#123;It&#39;s a New Chapter, Isn&#39;t It? (#5.1)&#125;  [Himself]</span><br><span class="line">&quot;Peter Andre: My Life&quot; (2011) &#123;Some Days Are Better Than Others (#4.1)&#125;  [Himself]</span><br><span class="line">&quot;Peter Andre: My Life&quot; (2011) &#123;There&#39;s Only One Problem... She Doesn&#39;t Like Coffee (#3.1)&#125;  [Himself]</span><br><span class="line">&quot;Peter Andre: My Life&quot; (2011) &#123;We&#39;re Off to Zanzib-Andre (#5.3)&#125;  [Himself]</span><br><span class="line">&quot;Peter Andre: My Life&quot; (2011) &#123;Why Wait, Why Hesitate? (#5.5)&#125;  [Himself]</span><br><span class="line"></span><br><span class="line">Andre, MiguelJourney Among Women (1977)  [Soldier]  &lt;21&gt;</span><br><span class="line"></span><br><span class="line">Andre, Mikail1 Lawan Satu (2013)  [Radhi]</span><br><span class="line">Dua Kalimah (2013)</span><br><span class="line">Gangster Wars (2013)  [Romeo]</span><br><span class="line">Mukasurat Cinta (2014)</span><br><span class="line">Sniper (2014)  [Mat Jambang]</span><br><span class="line">Tokak (2013)  [Boy]</span><br><span class="line"></span><br><span class="line">Andre, MikeA Mystery in Carmine (2012)  (as Mikey Andre)  [Toby]</span><br><span class="line"></span><br><span class="line">Andre, Mohd MikailHantu dalam botol kicap (2012)  [Azri]  &lt;4&gt;</span><br><span class="line"></span><br><span class="line">Andre, Mohd Pierre3 Temujanji (2012)  [Sein]  &lt;2&gt;</span><br><span class="line">3, 2, 1 cinta (2011)  (as Pierre Andre)  [Fariz]  &lt;3&gt;</span><br><span class="line">9 September (2007)  (as Pierre Andre)  [Kogi]  &lt;1&gt;</span><br><span class="line">Aku, Kau &amp; Dia (2012)  (as Pierre Andre)  [Abang Harris]</span><br><span class="line">Al-Hijab (2011)  (as Pierre Andre)  [Rafael]  &lt;1&gt;</span><br><span class="line">Chantek (2012)  [Ad]  &lt;1&gt;</span><br><span class="line">Cinta (2006)  [Taufiq]</span><br><span class="line">Cinta fotokopi (2005)  (as Pierre Andre)  [Din]</span><br><span class="line">Gol &amp; Gincu (2005)  [Reza]  &lt;3&gt;</span><br><span class="line">Jangan pandang belakang (2007)  [Darma]</span><br><span class="line">Jangan tegur (2009)  [Kamal]  &lt;2&gt;</span><br><span class="line">Krazy crazy krezy... (2009)  (as Pierre André)  &lt;3&gt;</span><br><span class="line">Pontianak harum sundal malam 2 (2005)  [Purnama]</span><br><span class="line">Potret mistik (2005)  (as Pierre Andre)  [Badrul]</span><br><span class="line">Salon (2005)  [Ezra Fernandez]  &lt;2&gt;</span><br><span class="line">Sepi (2008)  [Khalil]</span><br><span class="line">Seru (2011)  [Bob]</span><br><span class="line">Strawberi cinta (2012)  [Hakimi]</span><br><span class="line">X (2012&#x2F;I)  [Hafiz]</span><br><span class="line">&quot;Gol &amp; Gincu: The Series&quot; (2006)  [Reza]  &lt;2&gt;</span><br></pre></td></tr></table></figure><h3 id="用正则分析数据库文件"><a href="#用正则分析数据库文件" class="headerlink" title="用正则分析数据库文件"></a>用正则分析数据库文件</h3><p>我们使用正则来得到正确的数据，如果你之前没有接触过正则表达式，我推荐<a href="https://regexr.com/" target="_blank" rel="noopener">RegexR</a>网站提供给你学习。</p><p>我们将使用下面的正则字符串:</p><figure class="highlight re"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="literal">[A-Z<span class="identifier">a</span>-<span class="identifier">z</span>,.'<span class="identifier">$</span>&amp; ]</span>*)?(<span class="literal">[\<span class="identifier">t</span>]</span>*)(.+?)(<span class="literal">[ ]</span>*)\\((<span class="literal">[<span class="number">0</span>-<span class="number">9</span>,?]</span>&#123;<span class="number">4</span>&#125;)(.+?\\n&#123;<span class="number">2</span>&#125;)?</span><br></pre></td></tr></table></figure><p>这样会将所有的数据从演员中删除，然后你可以单独的使用这些数据。</p><h3 id="创建JAVA项目"><a href="#创建JAVA项目" class="headerlink" title="创建JAVA项目"></a>创建JAVA项目</h3><p>如果你之前没有接触过JAVA，希望你先学习一下JAVA的基础课程。</p><p>我们仅仅需要4个类：</p><ul><li>Main</li><li>Reader</li><li>Parser</li><li>Writer</li></ul><p>项目结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">DataParser</span><br><span class="line"> src</span><br><span class="line">  database</span><br><span class="line">   database.txt</span><br><span class="line">  Main.java</span><br><span class="line">  Writer.java</span><br><span class="line">  Reader.java</span><br><span class="line">  Parser.java</span><br><span class="line">&#96;&#96;&#96;  </span><br><span class="line"></span><br><span class="line">#### 创建Reader类</span><br><span class="line"></span><br><span class="line">我们应该做的第一件事是创建一个Reader类，该类将读取其中包含所有演员的数据库文件（database.txt）。在Java中，我们可以使用File和Scanner类读取文件的数据并将其放入ArrayList中。</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line"></span><br><span class="line">public class Reader &#123;</span><br><span class="line"></span><br><span class="line">    ArrayList&lt;String&gt; lines &#x3D; new ArrayList&lt;String&gt;();</span><br><span class="line">    public ArrayList&lt;String&gt; Read(String dbFile)&#123;</span><br><span class="line">        try &#123;</span><br><span class="line"></span><br><span class="line">            File readable &#x3D; new File(Reader.class.getResource(dbFile).getFile());</span><br><span class="line">            Scanner dbScanner &#x3D; new Scanner(readable);</span><br><span class="line">            while (dbScanner.hasNextLine()) &#123;</span><br><span class="line">                String data &#x3D; dbScanner.nextLine();</span><br><span class="line">                lines.add(data);</span><br><span class="line">            &#125;</span><br><span class="line">            dbScanner.close();</span><br><span class="line">             </span><br><span class="line"></span><br><span class="line">        &#125; catch(FileNotFoundException e) &#123;</span><br><span class="line">            System.out.println(&quot;File not found&quot;);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return lines;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先，创建保存String类型的ArrayList。公共方法Read（）将采用我们要读取的文件的路径，然后Scanner将每一行数据放入ArrayList中。如果没有剩余的行，关闭Scanner。</p><h4 id="创建Parser类"><a href="#创建Parser类" class="headerlink" title="创建Parser类"></a>创建Parser类</h4><p>为了将每一行的数据解析为结构化的csv文件，我们必须创建一个匹配模板并检查是否能够匹配刚刚读取的文件。</p><h5 id="ParseActors-方法"><a href="#ParseActors-方法" class="headerlink" title="ParseActors 方法"></a>ParseActors 方法</h5><p>ParseActors方法接收两个参数，文件存储的数据list，和一个正则表达式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ArrayList&lt;ArrayList&lt;String&gt;&gt; ParseActors(ArrayList&lt;String&gt; input, String regex) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法返回一个String泛型的一个ArrayList，这样可以保证数据库中的每个演员和电影能被分别注册。</p><h5 id="创建匹配模式"><a href="#创建匹配模式" class="headerlink" title="创建匹配模式"></a>创建匹配模式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Pattern pattern = Pattern.compile(regex);</span><br></pre></td></tr></table></figure><h5 id="组装响应值"><a href="#组装响应值" class="headerlink" title="组装响应值"></a>组装响应值</h5><p>为了确保我们的csv文件是结构化的。我们创建一个ArrayList并且添加csv的header (Actor, Title, Year)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;ArrayList&lt;String&gt;&gt; collections = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;String&gt; &gt;();</span><br><span class="line"></span><br><span class="line">collections.add(<span class="keyword">new</span> ArrayList&lt;String&gt;());</span><br><span class="line"></span><br><span class="line">collections.get(<span class="number">0</span>).add(<span class="string">"Actor"</span>);</span><br><span class="line">collections.get(<span class="number">0</span>).add(<span class="string">"Title"</span>);</span><br><span class="line">collections.get(<span class="number">0</span>).add(<span class="string">"Year"</span>);</span><br></pre></td></tr></table></figure><h5 id="查找匹配项并填充collections"><a href="#查找匹配项并填充collections" class="headerlink" title="查找匹配项并填充collections"></a>查找匹配项并填充collections</h5><p>现在我们已经准备好列表并创建好了匹配模板，我们可以搜索匹配项。再次查看正则表达式字符串时，我们发现可以匹配一些内容。我们只需要演员的姓名，他上演的电影以及年份。</p><p>让我们创建一个映射所有结果的<code>for</code>循环，然后使用匹配模板找到正确的<code>strings</code>。<br>现在，该数据库存在一个大问题，那就是我们只能看到演员一次，然后才能看到他所播放的电影的完整列表。</p><p>一旦将演员放入<code>collections</code>，我们假设在找到另一个演员之前，找到的所有电影都是他所扮演的电影。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parser</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;ArrayList&lt;String&gt;&gt; ParseActors(ArrayList&lt;String&gt; input, String regex) &#123;</span><br><span class="line">        Pattern pattern = Pattern.compile(regex);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//ArrayList&lt;String&gt; lijst = new ArrayList&lt;String&gt;();</span></span><br><span class="line"></span><br><span class="line">        ArrayList&lt;ArrayList&lt;String&gt;&gt; collections = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;String&gt; &gt;();</span><br><span class="line"></span><br><span class="line">        collections.add(<span class="keyword">new</span> ArrayList&lt;String&gt;());</span><br><span class="line"></span><br><span class="line">        collections.get(<span class="number">0</span>).add(<span class="string">"Actor"</span>);</span><br><span class="line">        collections.get(<span class="number">0</span>).add(<span class="string">"Title"</span>);</span><br><span class="line">        collections.get(<span class="number">0</span>).add(<span class="string">"Year"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; input.size(); i++) &#123;</span><br><span class="line">            Matcher matcher = pattern.matcher(input.get(i));</span><br><span class="line"></span><br><span class="line">            collections.add(<span class="keyword">new</span> ArrayList&lt;String&gt;());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(matcher.find()) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (matcher.group(<span class="number">1</span>) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    String actor = matcher.group(<span class="number">1</span>).toString();</span><br><span class="line">                    <span class="comment">//lijst.add(actor.replaceAll("[,]", ""));   </span></span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">if</span>(actor == <span class="string">""</span>)&#123;</span><br><span class="line">                        collections.get(i+<span class="number">1</span>).add(collections.get(i).get(<span class="number">0</span>).replaceAll(<span class="string">"[,]"</span>, <span class="string">""</span>).toString());</span><br><span class="line">                        System.out.println(collections.get(i+<span class="number">1</span>).get(<span class="number">0</span>));</span><br><span class="line">                         </span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        collections.get(i+<span class="number">1</span>).add(actor.replaceAll(<span class="string">"[,]"</span>, <span class="string">""</span>));</span><br><span class="line">                        System.out.println(collections.get(i+<span class="number">1</span>).get(<span class="number">0</span>));</span><br><span class="line">                    &#125;     </span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (matcher.group(<span class="number">3</span>) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//lijst.add(matcher.group(3));</span></span><br><span class="line"></span><br><span class="line">                    collections.get(i+<span class="number">1</span>).add(matcher.group(<span class="number">3</span>).replaceAll(<span class="string">"[\",]"</span>, <span class="string">""</span>).replaceAll(<span class="string">"[,]"</span>, <span class="string">""</span>).toString());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (matcher.group(<span class="number">5</span>) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//lijst.add(matcher.group(5));</span></span><br><span class="line">                    collections.get(i+<span class="number">1</span>).add(matcher.group(<span class="number">5</span>));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (matcher.group(<span class="number">6</span>) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//lijst.add("null");</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> collections;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建Writer类"><a href="#创建Writer类" class="headerlink" title="创建Writer类"></a>创建Writer类</h4><p>Writer类的作用是将输出的数据写入到csv文件中，我们将在此类中创建的两种方法比Parser类简单得多。<br>我们需要再次使用File类，这一次，我们创建一个名为data.csv的文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        File myObj = <span class="keyword">new</span> File(<span class="string">"data.csv"</span>);</span><br><span class="line">        <span class="keyword">if</span> (myObj.createNewFile()) &#123;</span><br><span class="line">            System.out.println(<span class="string">"File created: "</span> + myObj.getName());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"File already exists."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        System.out.println(<span class="string">"An error occurred."</span>);</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们再创建一个writeToFile()方法，该方法将所有数据逐行写入CSV文件中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeToFile</span><span class="params">(ArrayList&lt;ArrayList&lt;String&gt;&gt; parserOutput)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileWriter myWriter = <span class="keyword">new</span> FileWriter(<span class="string">"data.csv"</span>);</span><br><span class="line"></span><br><span class="line">            System.out.println(parserOutput);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; parserOutput.size(); i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(parserOutput.get(i).isEmpty())&#123;</span><br><span class="line">                    <span class="comment">//nothing</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   </span><br><span class="line">                    myWriter.append(parserOutput.get(i).get(<span class="number">0</span>) + <span class="string">","</span> + parserOutput.get(i).get(<span class="number">1</span>) + <span class="string">","</span> + parserOutput.get(i).get(<span class="number">2</span>) + <span class="string">"\n"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            myWriter.close();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"Successfully wrote to the file."</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"An error occurred."</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="整合代码"><a href="#整合代码" class="headerlink" title="整合代码"></a>整合代码</h4><p>为了将所有的代码整合在一起，测试我们的解析器，我们需要：</p><ul><li>创建一个<code>Main.java</code>并添加我们的正则字符串和数据库文件地址</li><li>创建 Writer, Reader, 和 Parser的实例</li><li>创建一个list存储读取数据</li><li>创建一个list存储解析数据</li></ul><p>最后，我们将所有的数据写入到csv文化中。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String file = <span class="string">"/databases/actorstest.txt"</span>;</span><br><span class="line">        String regex = <span class="string">"([A-Za-z,.'$&amp; ]*)?([\t]*)(.+?)([ ]*)\\(([0-9,?]&#123;4&#125;)(.+?\\n&#123;2&#125;)?"</span>;</span><br><span class="line"></span><br><span class="line">        Reader reader = <span class="keyword">new</span> Reader();</span><br><span class="line">        Parser parser = <span class="keyword">new</span> Parser();</span><br><span class="line">        Writer writer = <span class="keyword">new</span> Writer();</span><br><span class="line">        </span><br><span class="line">        ArrayList&lt;String&gt; lijst = reader.Read(file);</span><br><span class="line">        ArrayList&lt;ArrayList&lt;String&gt;&gt; parsed = parser.ParseActors(lijst, regex);</span><br><span class="line"></span><br><span class="line">     </span><br><span class="line">        writer.createFile();</span><br><span class="line">        writer.writeToFile(parsed);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h4 id="运行代码测试解析器"><a href="#运行代码测试解析器" class="headerlink" title="运行代码测试解析器"></a>运行代码测试解析器</h4><p>运行代码之后，会自动创建一个<code>data.csv</code>的文件，如下：</p><iframe src="csvsample.html" allowfullscreen="" frameborder="0" height="2252" width="680" title="data.csv"  scrolling="auto"></iframe><p>如你所见，它存储了所有的数据，并按照<code>标题</code>, <code>演员</code>, 和<code>年份</code>分组。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>我们为演员列表创建了一个解析器。如果要解析更多IMDB列表或找到的任何数据库/列表，则可以创建一个新的Parse（）方法。<br>这样的解析器使您可以更好地理解数据的外观。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>用JAVA实现一个IMDB数据解析器/csvsample</title>
      <link href="2021/03/31/%E7%94%A8JAVA%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAIMDB%E6%95%B0%E6%8D%AE%E8%A7%A3%E6%9E%90%E5%99%A8/csvsample/"/>
      <url>2021/03/31/%E7%94%A8JAVA%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAIMDB%E6%95%B0%E6%8D%AE%E8%A7%A3%E6%9E%90%E5%99%A8/csvsample/</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><!-- saved from url=(0071)https://levelup.gitconnected.com/media/f8aa2acdb7bb98605773021fe930d0cc --><html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><title>data.csv – Medium</title><meta name="description" content="Instantly share code, notes, and snippets. You can&#39;t perform that action at this time. You signed in with another tab or window. You signed out in another tab or window. Reload to refresh your session. Reload to refresh your session."><meta name="twitter:widgets:csp" content="on"><meta name="robots" content="noindex"><!--<base target="_blank">--><base href="." target="_blank"><style>body {text-rendering: optimizeLegibility; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; font-family: "ff-tisa-web-pro", Georgia, Cambria, "Times New Roman", Times, serif; font-weight: 400; color: #333332; font-size: 18px; line-height: 1.4; margin: 0; background-color: white; overflow: hidden;}iframe {max-width: 100%;}</style><meta name="generator" content="Hexo 4.2.1"></head><body><style>.gist .gist-file { margin-bottom: 0 !important; }.gist { text-rendering: auto; }</style><script src="./csvsample_files/eb1155fe1c30cc5d9bf1189d2ffbd0bb.js.下载" charset="utf-8"></script><link rel="stylesheet" href="./csvsample_files/gist-embed-33b98015caf26cfcbee6ce1a5d1fc768.css"><div id="gist108695785" class="gist">    <div class="gist-file">      <div class="gist-data">        <div class="js-gist-file-update-container js-task-list-container file-box">  <div id="file-data-csv" class="file my-2">      <div itemprop="text" class="Box-body p-0 blob-wrapper data type-csv  ">      <div class="blob-interaction-bar">  <svg class="octicon octicon-search" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M11.5 7a4.499 4.499 0 11-8.998 0A4.499 4.499 0 0111.5 7zm-.82 4.74a6 6 0 111.06-1.06l3.04 3.04a.75.75 0 11-1.06 1.06l-3.04-3.04z"></path></svg>  <input type="text" name="filter" class="form-control js-csv-filter-field blob-filter" autocapitalize="off" placeholder="Search this file…" aria-label="Search this file…"></div>  <div class="markdown-body">    <table class="js-csv-data csv-data js-file-line-container">      <thead>        <tr id="file-data-csv-LC1" class="js-file-line">          <td id="file-data-csv-L1" class="blob-num js-line-number" data-line-number="1"></td>            <th>Actor</th>            <th>Title</th>            <th>Year</th>        </tr>      </thead>      <tbody>          <tr id="file-data-csv-LC2" class="js-file-line">            <td id="file-data-csv-L2" class="blob-num js-line-number" data-line-number="2"></td>              <td>Andre Kent</td>              <td>The Mask: The Origin</td>              <td>1995</td>          </tr>          <tr id="file-data-csv-LC3" class="js-file-line">            <td id="file-data-csv-L3" class="blob-num js-line-number" data-line-number="3"></td>              <td>Andre Kevin</td>              <td>Come Fly with Us</td>              <td>1974</td>          </tr>          <tr id="file-data-csv-LC4" class="js-file-line">            <td id="file-data-csv-L4" class="blob-num js-line-number" data-line-number="4"></td>              <td>Andre Kevin</td>              <td>Deep Throat Part II</td>              <td>1974</td>          </tr>          <tr id="file-data-csv-LC5" class="js-file-line">            <td id="file-data-csv-L5" class="blob-num js-line-number" data-line-number="5"></td>              <td>Andre Kevin</td>              <td>Fringe Benefits</td>              <td>1974</td>          </tr>          <tr id="file-data-csv-LC6" class="js-file-line">            <td id="file-data-csv-L6" class="blob-num js-line-number" data-line-number="6"></td>              <td>Andre Kevin</td>              <td>Invasion of the Love Drones</td>              <td>1977</td>          </tr>          <tr id="file-data-csv-LC7" class="js-file-line">            <td id="file-data-csv-L7" class="blob-num js-line-number" data-line-number="7"></td>              <td>Andre Kevin</td>              <td>Is There Sex After Death?</td>              <td>1971</td>          </tr>          <tr id="file-data-csv-LC8" class="js-file-line">            <td id="file-data-csv-L8" class="blob-num js-line-number" data-line-number="8"></td>              <td>Andre Kevin</td>              <td>Lady on the Couch</td>              <td>1974</td>          </tr>          <tr id="file-data-csv-LC9" class="js-file-line">            <td id="file-data-csv-L9" class="blob-num js-line-number" data-line-number="9"></td>              <td>Andre Kevin</td>              <td>Naked Came the Stranger</td>              <td>1975</td>          </tr>          <tr id="file-data-csv-LC10" class="js-file-line">            <td id="file-data-csv-L10" class="blob-num js-line-number" data-line-number="10"></td>              <td>Andre Kevin</td>              <td>Sex Fantasies</td>              <td>1975</td>          </tr>          <tr id="file-data-csv-LC11" class="js-file-line">            <td id="file-data-csv-L11" class="blob-num js-line-number" data-line-number="11"></td>              <td>Andre Kevin</td>              <td>Stigma</td>              <td>1972</td>          </tr>          <tr id="file-data-csv-LC12" class="js-file-line">            <td id="file-data-csv-L12" class="blob-num js-line-number" data-line-number="12"></td>              <td>Andre Kevin</td>              <td>Teenage Hitchhikers</td>              <td>1975</td>          </tr>          <tr id="file-data-csv-LC13" class="js-file-line">            <td id="file-data-csv-L13" class="blob-num js-line-number" data-line-number="13"></td>              <td>Andre Kevin</td>              <td>The $50000 Climax Show</td>              <td>1975</td>          </tr>          <tr id="file-data-csv-LC14" class="js-file-line">            <td id="file-data-csv-L14" class="blob-num js-line-number" data-line-number="14"></td>              <td>Andre Kevin</td>              <td>The Big Con</td>              <td>1975</td>          </tr>          <tr id="file-data-csv-LC15" class="js-file-line">            <td id="file-data-csv-L15" class="blob-num js-line-number" data-line-number="15"></td>              <td>Andre Kevin</td>              <td>The Defiance of Good</td>              <td>1975</td>          </tr>          <tr id="file-data-csv-LC16" class="js-file-line">            <td id="file-data-csv-L16" class="blob-num js-line-number" data-line-number="16"></td>              <td>Andre Kevin</td>              <td>The Love Bus</td>              <td>1974</td>          </tr>          <tr id="file-data-csv-LC17" class="js-file-line">            <td id="file-data-csv-L17" class="blob-num js-line-number" data-line-number="17"></td>              <td>Andre Kevin</td>              <td>The Mount of Venus</td>              <td>1975</td>          </tr>          <tr id="file-data-csv-LC18" class="js-file-line">            <td id="file-data-csv-L18" class="blob-num js-line-number" data-line-number="18"></td>              <td>Andre Kevin</td>              <td>The New York City Woman</td>              <td>1977</td>          </tr>          <tr id="file-data-csv-LC19" class="js-file-line">            <td id="file-data-csv-L19" class="blob-num js-line-number" data-line-number="19"></td>              <td>Andre Kevin</td>              <td>The Passions of Carol</td>              <td>1975</td>          </tr>          <tr id="file-data-csv-LC20" class="js-file-line">            <td id="file-data-csv-L20" class="blob-num js-line-number" data-line-number="20"></td>              <td>Andre Kevin</td>              <td>The Private Afternoons of Pamela Mann</td>              <td>1974</td>          </tr>          <tr id="file-data-csv-LC21" class="js-file-line">            <td id="file-data-csv-L21" class="blob-num js-line-number" data-line-number="21"></td>              <td>Andre Kevin</td>              <td>The Switch or How to Alter Your Ego</td>              <td>1974</td>          </tr>          <tr id="file-data-csv-LC22" class="js-file-line">            <td id="file-data-csv-L22" class="blob-num js-line-number" data-line-number="22"></td>              <td>Andre Kevin</td>              <td>Whatever Happened to Miss September?</td>              <td>1973</td>          </tr>          <tr id="file-data-csv-LC23" class="js-file-line">            <td id="file-data-csv-L23" class="blob-num js-line-number" data-line-number="23"></td>              <td>Andre Kurt</td>              <td>My Politics My Country</td>              <td>2012</td>          </tr>          <tr id="file-data-csv-LC24" class="js-file-line">            <td id="file-data-csv-L24" class="blob-num js-line-number" data-line-number="24"></td>              <td>Andre Kurt</td>              <td>World Bender</td>              <td>2014</td>          </tr>          <tr id="file-data-csv-LC25" class="js-file-line">            <td id="file-data-csv-L25" class="blob-num js-line-number" data-line-number="25"></td>              <td>Andre L.J.</td>              <td>Disneyland</td>              <td>1954</td>          </tr>          <tr id="file-data-csv-LC26" class="js-file-line">            <td id="file-data-csv-L26" class="blob-num js-line-number" data-line-number="26"></td>              <td>Andre L.J.</td>              <td>Disneyland</td>              <td>1954</td>          </tr>          <tr id="file-data-csv-LC27" class="js-file-line">            <td id="file-data-csv-L27" class="blob-num js-line-number" data-line-number="27"></td>              <td>Andre LeClerc</td>              <td>StreetSmart Guide</td>              <td>2014</td>          </tr>          <tr id="file-data-csv-LC28" class="js-file-line">            <td id="file-data-csv-L28" class="blob-num js-line-number" data-line-number="28"></td>              <td>Andre LeClerc</td>              <td>Laughs</td>              <td>2014</td>          </tr>          <tr id="file-data-csv-LC29" class="js-file-line">            <td id="file-data-csv-L29" class="blob-num js-line-number" data-line-number="29"></td>              <td>Andre LeClerc</td>              <td>Laughs</td>              <td>2014</td>          </tr>          <tr id="file-data-csv-LC30" class="js-file-line">            <td id="file-data-csv-L30" class="blob-num js-line-number" data-line-number="30"></td>              <td>Andre Lorin</td>              <td>-PierreCirque du Soleil: Worlds Away</td>              <td>2012</td>          </tr>          <tr id="file-data-csv-LC31" class="js-file-line">            <td id="file-data-csv-L31" class="blob-num js-line-number" data-line-number="31"></td>              <td>Andre Lorin</td>              <td>The Neighborhood Ball: An Inauguration Celebration</td>              <td>2009</td>          </tr>          <tr id="file-data-csv-LC32" class="js-file-line">            <td id="file-data-csv-L32" class="blob-num js-line-number" data-line-number="32"></td>              <td>Andre Lukka</td>              <td>Armando Rene: Start Running</td>              <td>2015</td>          </tr>          <tr id="file-data-csv-LC33" class="js-file-line">            <td id="file-data-csv-L33" class="blob-num js-line-number" data-line-number="33"></td>              <td>Andre Lukka</td>              <td>Making of Salir Corriendo</td>              <td>2015</td>          </tr>          <tr id="file-data-csv-LC34" class="js-file-line">            <td id="file-data-csv-L34" class="blob-num js-line-number" data-line-number="34"></td>              <td>Andre Mandi</td>              <td>Memoirs of a Lifeguard</td>              <td>2010</td>          </tr>          <tr id="file-data-csv-LC35" class="js-file-line">            <td id="file-data-csv-L35" class="blob-num js-line-number" data-line-number="35"></td>              <td>Andre Marcus</td>              <td>The Grad Film</td>              <td>2015</td>          </tr>          <tr id="file-data-csv-LC36" class="js-file-line">            <td id="file-data-csv-L36" class="blob-num js-line-number" data-line-number="36"></td>              <td>Andre Mario </td>              <td>(I)Love Your Mama</td>              <td>1990</td>          </tr>          <tr id="file-data-csv-LC37" class="js-file-line">            <td id="file-data-csv-L37" class="blob-num js-line-number" data-line-number="37"></td>              <td>Andre Mario </td>              <td>(II)Market Value</td>              <td>2016</td>          </tr>          <tr id="file-data-csv-LC38" class="js-file-line">            <td id="file-data-csv-L38" class="blob-num js-line-number" data-line-number="38"></td>              <td>Andre Mario </td>              <td>The Breakout Dream</td>              <td>2015</td>          </tr>          <tr id="file-data-csv-LC39" class="js-file-line">            <td id="file-data-csv-L39" class="blob-num js-line-number" data-line-number="39"></td>              <td>Andre Mario </td>              <td>The Penny</td>              <td>2010</td>          </tr>          <tr id="file-data-csv-LC40" class="js-file-line">            <td id="file-data-csv-L40" class="blob-num js-line-number" data-line-number="40"></td>              <td>Andre Mario </td>              <td>(III)Blactose Intolerance</td>              <td>2015</td>          </tr>          <tr id="file-data-csv-LC41" class="js-file-line">            <td id="file-data-csv-L41" class="blob-num js-line-number" data-line-number="41"></td>              <td>Andre Mario </td>              <td>Life Outside the Rhyme</td>              <td>2016</td>          </tr>          <tr id="file-data-csv-LC42" class="js-file-line">            <td id="file-data-csv-L42" class="blob-num js-line-number" data-line-number="42"></td>              <td>Andre Mario </td>              <td>Preacher Man</td>              <td>2015</td>          </tr>          <tr id="file-data-csv-LC43" class="js-file-line">            <td id="file-data-csv-L43" class="blob-num js-line-number" data-line-number="43"></td>              <td>Andre Mario </td>              <td>School for Gods</td>              <td>????</td>          </tr>          <tr id="file-data-csv-LC44" class="js-file-line">            <td id="file-data-csv-L44" class="blob-num js-line-number" data-line-number="44"></td>              <td>Andre Mario </td>              <td>Under Pressure</td>              <td>2016</td>          </tr>          <tr id="file-data-csv-LC45" class="js-file-line">            <td id="file-data-csv-L45" class="blob-num js-line-number" data-line-number="45"></td>              <td>Andre Mario </td>              <td>The Natural</td>              <td>2016</td>          </tr>          <tr id="file-data-csv-LC46" class="js-file-line">            <td id="file-data-csv-L46" class="blob-num js-line-number" data-line-number="46"></td>              <td>Andre Martin</td>              <td>Vasilissa maimou</td>              <td>2000</td>          </tr>          <tr id="file-data-csv-LC47" class="js-file-line">            <td id="file-data-csv-L47" class="blob-num js-line-number" data-line-number="47"></td>              <td>Andre Mat </td>              <td>(I)Lights Camera Blood!</td>              <td>2015</td>          </tr>          <tr id="file-data-csv-LC48" class="js-file-line">            <td id="file-data-csv-L48" class="blob-num js-line-number" data-line-number="48"></td>              <td>Andre Mat </td>              <td>Todd and the Book of Pure Evil</td>              <td>2010</td>          </tr>          <tr id="file-data-csv-LC49" class="js-file-line">            <td id="file-data-csv-L49" class="blob-num js-line-number" data-line-number="49"></td>              <td>Andre Mathias </td>              <td>(II)Guilty Pleasures</td>              <td>2016</td>          </tr>          <tr id="file-data-csv-LC50" class="js-file-line">            <td id="file-data-csv-L50" class="blob-num js-line-number" data-line-number="50"></td>              <td>Andre Matthew</td>              <td>Santa Rosa</td>              <td>2004</td>          </tr>          <tr id="file-data-csv-LC51" class="js-file-line">            <td id="file-data-csv-L51" class="blob-num js-line-number" data-line-number="51"></td>              <td>Andre Michael </td>              <td>(II)Here 2 Help</td>              <td>2011</td>          </tr>          <tr id="file-data-csv-LC52" class="js-file-line">            <td id="file-data-csv-L52" class="blob-num js-line-number" data-line-number="52"></td>              <td>Andre Michael </td>              <td>Here 2 Help</td>              <td>2011</td>          </tr>          <tr id="file-data-csv-LC53" class="js-file-line">            <td id="file-data-csv-L53" class="blob-num js-line-number" data-line-number="53"></td>              <td>Andre Michael </td>              <td>Here 2 Help</td>              <td>2011</td>          </tr>          <tr id="file-data-csv-LC54" class="js-file-line">            <td id="file-data-csv-L54" class="blob-num js-line-number" data-line-number="54"></td>              <td>Andre Michael </td>              <td>Here 2 Help</td>              <td>2011</td>          </tr>          <tr id="file-data-csv-LC55" class="js-file-line">            <td id="file-data-csv-L55" class="blob-num js-line-number" data-line-number="55"></td>              <td>Andre Michael </td>              <td>Here 2 Help</td>              <td>2011</td>          </tr>          <tr id="file-data-csv-LC56" class="js-file-line">            <td id="file-data-csv-L56" class="blob-num js-line-number" data-line-number="56"></td>              <td>Andre Michael </td>              <td>Peter Andre: My Life</td>              <td>2011</td>          </tr>          <tr id="file-data-csv-LC57" class="js-file-line">            <td id="file-data-csv-L57" class="blob-num js-line-number" data-line-number="57"></td>              <td>Andre Michael </td>              <td>Peter Andre: My Life</td>              <td>2011</td>          </tr>          <tr id="file-data-csv-LC58" class="js-file-line">            <td id="file-data-csv-L58" class="blob-num js-line-number" data-line-number="58"></td>              <td>Andre Michael </td>              <td>Peter Andre: My Life</td>              <td>2011</td>          </tr>          <tr id="file-data-csv-LC59" class="js-file-line">            <td id="file-data-csv-L59" class="blob-num js-line-number" data-line-number="59"></td>              <td>Andre Michael </td>              <td>Peter Andre: My Life</td>              <td>2011</td>          </tr>          <tr id="file-data-csv-LC60" class="js-file-line">            <td id="file-data-csv-L60" class="blob-num js-line-number" data-line-number="60"></td>              <td>Andre Michael </td>              <td>Peter Andre: My Life</td>              <td>2011</td>          </tr>          <tr id="file-data-csv-LC61" class="js-file-line">            <td id="file-data-csv-L61" class="blob-num js-line-number" data-line-number="61"></td>              <td>Andre Michael </td>              <td>Peter Andre: My Life</td>              <td>2011</td>          </tr>          <tr id="file-data-csv-LC62" class="js-file-line">            <td id="file-data-csv-L62" class="blob-num js-line-number" data-line-number="62"></td>              <td>Andre Michael </td>              <td>Peter Andre: My Life</td>              <td>2011</td>          </tr>          <tr id="file-data-csv-LC63" class="js-file-line">            <td id="file-data-csv-L63" class="blob-num js-line-number" data-line-number="63"></td>              <td>Andre Michael </td>              <td>Peter Andre: My Life</td>              <td>2011</td>          </tr>          <tr id="file-data-csv-LC64" class="js-file-line">            <td id="file-data-csv-L64" class="blob-num js-line-number" data-line-number="64"></td>              <td>Andre Michael </td>              <td>Peter Andre: My Life</td>              <td>2011</td>          </tr>          <tr id="file-data-csv-LC65" class="js-file-line">            <td id="file-data-csv-L65" class="blob-num js-line-number" data-line-number="65"></td>              <td>Andre Michael </td>              <td>Peter Andre: My Life</td>              <td>2011</td>          </tr>          <tr id="file-data-csv-LC66" class="js-file-line">            <td id="file-data-csv-L66" class="blob-num js-line-number" data-line-number="66"></td>              <td>Andre Michael </td>              <td>Peter Andre: My Life</td>              <td>2011</td>          </tr>          <tr id="file-data-csv-LC67" class="js-file-line">            <td id="file-data-csv-L67" class="blob-num js-line-number" data-line-number="67"></td>              <td>Andre Michael </td>              <td>Peter Andre: My Life</td>              <td>2011</td>          </tr>          <tr id="file-data-csv-LC68" class="js-file-line">            <td id="file-data-csv-L68" class="blob-num js-line-number" data-line-number="68"></td>              <td>Andre Michael </td>              <td>Peter Andre: My Life</td>              <td>2011</td>          </tr>          <tr id="file-data-csv-LC69" class="js-file-line">            <td id="file-data-csv-L69" class="blob-num js-line-number" data-line-number="69"></td>              <td>Andre Miguel</td>              <td>Journey Among Women</td>              <td>1977</td>          </tr>          <tr id="file-data-csv-LC70" class="js-file-line">            <td id="file-data-csv-L70" class="blob-num js-line-number" data-line-number="70"></td>              <td>Andre Mikail</td>              <td>1 Lawan Satu</td>              <td>2013</td>          </tr>          <tr id="file-data-csv-LC71" class="js-file-line">            <td id="file-data-csv-L71" class="blob-num js-line-number" data-line-number="71"></td>              <td>Andre Mikail</td>              <td>Dua Kalimah</td>              <td>2013</td>          </tr>          <tr id="file-data-csv-LC72" class="js-file-line">            <td id="file-data-csv-L72" class="blob-num js-line-number" data-line-number="72"></td>              <td>Andre Mikail</td>              <td>Gangster Wars</td>              <td>2013</td>          </tr>          <tr id="file-data-csv-LC73" class="js-file-line">            <td id="file-data-csv-L73" class="blob-num js-line-number" data-line-number="73"></td>              <td>Andre Mikail</td>              <td>Mukasurat Cinta</td>              <td>2014</td>          </tr>          <tr id="file-data-csv-LC74" class="js-file-line">            <td id="file-data-csv-L74" class="blob-num js-line-number" data-line-number="74"></td>              <td>Andre Mikail</td>              <td>Sniper</td>              <td>2014</td>          </tr>          <tr id="file-data-csv-LC75" class="js-file-line">            <td id="file-data-csv-L75" class="blob-num js-line-number" data-line-number="75"></td>              <td>Andre Mikail</td>              <td>Tokak</td>              <td>2013</td>          </tr>          <tr id="file-data-csv-LC76" class="js-file-line">            <td id="file-data-csv-L76" class="blob-num js-line-number" data-line-number="76"></td>              <td>Andre Mike</td>              <td>A Mystery in Carmine</td>              <td>2012</td>          </tr>          <tr id="file-data-csv-LC77" class="js-file-line">            <td id="file-data-csv-L77" class="blob-num js-line-number" data-line-number="77"></td>              <td>Andre Mohd Mikail</td>              <td>Hantu dalam botol kicap</td>              <td>2012</td>          </tr>          <tr id="file-data-csv-LC78" class="js-file-line">            <td id="file-data-csv-L78" class="blob-num js-line-number" data-line-number="78"></td>              <td>Andre Mohd Pierre</td>              <td>3 Temujanji</td>              <td>2012</td>          </tr>          <tr id="file-data-csv-LC79" class="js-file-line">            <td id="file-data-csv-L79" class="blob-num js-line-number" data-line-number="79"></td>              <td>Andre Mohd Pierre</td>              <td>3 2 1 cinta</td>              <td>2011</td>          </tr>          <tr id="file-data-csv-LC80" class="js-file-line">            <td id="file-data-csv-L80" class="blob-num js-line-number" data-line-number="80"></td>              <td>Andre Mohd Pierre</td>              <td>9 September</td>              <td>2007</td>          </tr>          <tr id="file-data-csv-LC81" class="js-file-line">            <td id="file-data-csv-L81" class="blob-num js-line-number" data-line-number="81"></td>              <td>Andre Mohd Pierre</td>              <td>Aku Kau &amp; Dia</td>              <td>2012</td>          </tr>          <tr id="file-data-csv-LC82" class="js-file-line">            <td id="file-data-csv-L82" class="blob-num js-line-number" data-line-number="82"></td>              <td>Andre Mohd Pierre</td>              <td>Al-Hijab</td>              <td>2011</td>          </tr>          <tr id="file-data-csv-LC83" class="js-file-line">            <td id="file-data-csv-L83" class="blob-num js-line-number" data-line-number="83"></td>              <td>Andre Mohd Pierre</td>              <td>Chantek</td>              <td>2012</td>          </tr>          <tr id="file-data-csv-LC84" class="js-file-line">            <td id="file-data-csv-L84" class="blob-num js-line-number" data-line-number="84"></td>              <td>Andre Mohd Pierre</td>              <td>Cinta</td>              <td>2006</td>          </tr>          <tr id="file-data-csv-LC85" class="js-file-line">            <td id="file-data-csv-L85" class="blob-num js-line-number" data-line-number="85"></td>              <td>Andre Mohd Pierre</td>              <td>Cinta fotokopi</td>              <td>2005</td>          </tr>          <tr id="file-data-csv-LC86" class="js-file-line">            <td id="file-data-csv-L86" class="blob-num js-line-number" data-line-number="86"></td>              <td>Andre Mohd Pierre</td>              <td>Gol &amp; Gincu</td>              <td>2005</td>          </tr>          <tr id="file-data-csv-LC87" class="js-file-line">            <td id="file-data-csv-L87" class="blob-num js-line-number" data-line-number="87"></td>              <td>Andre Mohd Pierre</td>              <td>Jangan pandang belakang</td>              <td>2007</td>          </tr>          <tr id="file-data-csv-LC88" class="js-file-line">            <td id="file-data-csv-L88" class="blob-num js-line-number" data-line-number="88"></td>              <td>Andre Mohd Pierre</td>              <td>Jangan tegur</td>              <td>2009</td>          </tr>          <tr id="file-data-csv-LC89" class="js-file-line">            <td id="file-data-csv-L89" class="blob-num js-line-number" data-line-number="89"></td>              <td>Andre Mohd Pierre</td>              <td>Krazy crazy krezy...</td>              <td>2009</td>          </tr>          <tr id="file-data-csv-LC90" class="js-file-line">            <td id="file-data-csv-L90" class="blob-num js-line-number" data-line-number="90"></td>              <td>Andre Mohd Pierre</td>              <td>Pontianak harum sundal malam 2</td>              <td>2005</td>          </tr>          <tr id="file-data-csv-LC91" class="js-file-line">            <td id="file-data-csv-L91" class="blob-num js-line-number" data-line-number="91"></td>              <td>Andre Mohd Pierre</td>              <td>Potret mistik</td>              <td>2005</td>          </tr>          <tr id="file-data-csv-LC92" class="js-file-line">            <td id="file-data-csv-L92" class="blob-num js-line-number" data-line-number="92"></td>              <td>Andre Mohd Pierre</td>              <td>Salon</td>              <td>2005</td>          </tr>          <tr id="file-data-csv-LC93" class="js-file-line">            <td id="file-data-csv-L93" class="blob-num js-line-number" data-line-number="93"></td>              <td>Andre Mohd Pierre</td>              <td>Sepi</td>              <td>2008</td>          </tr>          <tr id="file-data-csv-LC94" class="js-file-line">            <td id="file-data-csv-L94" class="blob-num js-line-number" data-line-number="94"></td>              <td>Andre Mohd Pierre</td>              <td>Seru</td>              <td>2011</td>          </tr>          <tr id="file-data-csv-LC95" class="js-file-line">            <td id="file-data-csv-L95" class="blob-num js-line-number" data-line-number="95"></td>              <td>Andre Mohd Pierre</td>              <td>Strawberi cinta</td>              <td>2012</td>          </tr>          <tr id="file-data-csv-LC96" class="js-file-line">            <td id="file-data-csv-L96" class="blob-num js-line-number" data-line-number="96"></td>              <td>Andre Mohd Pierre</td>              <td>X</td>              <td>2012</td>          </tr>          <tr id="file-data-csv-LC97" class="js-file-line">            <td id="file-data-csv-L97" class="blob-num js-line-number" data-line-number="97"></td>              <td>Andre Mohd Pierre</td>              <td>Gol &amp; Gincu: The Series</td>              <td>2006</td>          </tr>      </tbody>    </table>  </div>  </div>  </div></div>      </div>      <div class="gist-meta">        <a href="https://gist.github.com/bryandijkhuizen/eb1155fe1c30cc5d9bf1189d2ffbd0bb/raw/e4b93bc1ee9d1b3fcc7514aad035b86bb3f9ddf0/data.csv" target="_blank" rel="noopener" style="float:right">view raw</a>        <a href="https://gist.github.com/bryandijkhuizen/eb1155fe1c30cc5d9bf1189d2ffbd0bb#file-data-csv" target="_blank" rel="noopener">data.csv</a>        hosted with ❤ by <a href="https://github.com/" target="_blank" rel="noopener">GitHub</a>      </div>    </div></div><script>var height = -1; var delayMs = 200; if (document) {document.domain = document.domain;}function notifyResize(height) {height = height ? height : document.documentElement.offsetHeight; var resized = false; if (window.donkey && donkey.resize) {donkey.resize(height);var elements = document.getElementsByClassName("gist-data"); for (var i = 0; i < elements.length; i++) {elements[i].style.overflow = "visible"}resized = true;}if (parent && parent._resizeIframe) {var obj = {iframe: window.frameElement, height: height}; parent._resizeIframe(obj); resized = true;}if (window.location && window.location.hash === "#amp=1" && window.parent && window.parent.postMessage) {window.parent.postMessage({sentinel: "amp", type: "embed-size", height: height}, "*");}if (window.webkit && window.webkit.messageHandlers && window.webkit.messageHandlers.resize) {window.webkit.messageHandlers.resize.postMessage(height); resized = true;}return resized;}function maybeResize() {try {if (document.documentElement.offsetHeight != height && notifyResize()) {height = document.documentElement.offsetHeight;}delayMs = Math.min(delayMs * 2, 1000000); setTimeout(maybeResize, delayMs);} catch(error) {console.log('maybeResize error: ', error)}}maybeResize();</script></body></html>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>用JAVA实现一个IMDB数据解析器/csvsample_files/gist-embed-33b98015caf26cfcbee6ce1a5d1fc768</title>
      <link href="2021/03/31/%E7%94%A8JAVA%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAIMDB%E6%95%B0%E6%8D%AE%E8%A7%A3%E6%9E%90%E5%99%A8/csvsample_files/gist-embed-33b98015caf26cfcbee6ce1a5d1fc768/"/>
      <url>2021/03/31/%E7%94%A8JAVA%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAIMDB%E6%95%B0%E6%8D%AE%E8%A7%A3%E6%9E%90%E5%99%A8/csvsample_files/gist-embed-33b98015caf26cfcbee6ce1a5d1fc768/</url>
      
        <content type="html"><![CDATA[.gist{    /*! * GitHub Light v0.4.1 * Copyright (c) 2012 - 2017 GitHub, Inc. * Licensed under MIT (https://github.com/primer/github-syntax-theme-generator/blob/master/LICENSE) */font-size:16px;color:#333;text-align:left;direction:ltr;--color-scale-black:#1b1f23;--color-scale-white:#fff;--color-scale-gray-0:#fafbfc;--color-scale-gray-1:#f6f8fa;--color-scale-gray-2:#e1e4e8;--color-scale-gray-3:#d1d5da;--color-scale-gray-4:#959da5;--color-scale-gray-5:#6a737d;--color-scale-gray-6:#586069;--color-scale-gray-7:#444d56;--color-scale-gray-8:#2f363d;--color-scale-gray-9:#24292e;--color-scale-blue-0:#f1f8ff;--color-scale-blue-1:#dbedff;--color-scale-blue-2:#c8e1ff;--color-scale-blue-3:#79b8ff;--color-scale-blue-4:#2188ff;--color-scale-blue-5:#0366d6;--color-scale-blue-6:#005cc5;--color-scale-blue-7:#044289;--color-scale-blue-8:#032f62;--color-scale-blue-9:#05264c;--color-scale-green-0:#f0fff4;--color-scale-green-1:#dcffe4;--color-scale-green-2:#bef5cb;--color-scale-green-3:#85e89d;--color-scale-green-4:#34d058;--color-scale-green-5:#28a745;--color-scale-green-6:#22863a;--color-scale-green-7:#176f2c;--color-scale-green-8:#165c26;--color-scale-green-9:#144620;--color-scale-yellow-0:#fffdef;--color-scale-yellow-1:#fffbdd;--color-scale-yellow-2:#fff5b1;--color-scale-yellow-3:#ffea7f;--color-scale-yellow-4:#ffdf5d;--color-scale-yellow-5:#ffd33d;--color-scale-yellow-6:#f9c513;--color-scale-yellow-7:#dbab09;--color-scale-yellow-8:#b08800;--color-scale-yellow-9:#735c0f;--color-scale-orange-0:#fff8f2;--color-scale-orange-1:#ffebda;--color-scale-orange-2:#ffd1ac;--color-scale-orange-3:#ffab70;--color-scale-orange-4:#fb8532;--color-scale-orange-5:#f66a0a;--color-scale-orange-6:#e36209;--color-scale-orange-7:#d15704;--color-scale-orange-8:#c24e00;--color-scale-orange-9:#a04100;--color-scale-red-0:#ffeef0;--color-scale-red-1:#ffdce0;--color-scale-red-2:#fdaeb7;--color-scale-red-3:#f97583;--color-scale-red-4:#ea4a5a;--color-scale-red-5:#d73a49;--color-scale-red-6:#cb2431;--color-scale-red-7:#b31d28;--color-scale-red-8:#9e1c23;--color-scale-red-9:#86181d;--color-scale-purple-0:#f5f0ff;--color-scale-purple-1:#e6dcfd;--color-scale-purple-2:#d1bcf9;--color-scale-purple-3:#b392f0;--color-scale-purple-4:#8a63d2;--color-scale-purple-5:#6f42c1;--color-scale-purple-6:#5a32a3;--color-scale-purple-7:#4c2889;--color-scale-purple-8:#3a1d6e;--color-scale-purple-9:#29134e;--color-scale-pink-0:#ffeef8;--color-scale-pink-1:#fedbf0;--color-scale-pink-2:#f9b3dd;--color-scale-pink-3:#f692ce;--color-scale-pink-4:#ec6cb9;--color-scale-pink-5:#ea4aaa;--color-scale-pink-6:#d03592;--color-scale-pink-7:#b93a86;--color-scale-pink-8:#99306f;--color-scale-pink-9:#6d224f;--color-auto-black:#1b1f23;--color-auto-white:#fff;--color-auto-gray-0:#fafbfc;--color-auto-gray-1:#f6f8fa;--color-auto-gray-2:#e1e4e8;--color-auto-gray-3:#d1d5da;--color-auto-gray-4:#959da5;--color-auto-gray-5:#6a737d;--color-auto-gray-6:#586069;--color-auto-gray-7:#444d56;--color-auto-gray-8:#2f363d;--color-auto-gray-9:#24292e;--color-auto-blue-0:#f1f8ff;--color-auto-blue-1:#dbedff;--color-auto-blue-2:#c8e1ff;--color-auto-blue-3:#79b8ff;--color-auto-blue-4:#2188ff;--color-auto-blue-5:#0366d6;--color-auto-blue-6:#005cc5;--color-auto-blue-7:#044289;--color-auto-blue-8:#032f62;--color-auto-blue-9:#05264c;--color-auto-green-0:#f0fff4;--color-auto-green-1:#dcffe4;--color-auto-green-2:#bef5cb;--color-auto-green-3:#85e89d;--color-auto-green-4:#34d058;--color-auto-green-5:#28a745;--color-auto-green-6:#22863a;--color-auto-green-7:#176f2c;--color-auto-green-8:#165c26;--color-auto-green-9:#144620;--color-auto-yellow-0:#fffdef;--color-auto-yellow-1:#fffbdd;--color-auto-yellow-2:#fff5b1;--color-auto-yellow-3:#ffea7f;--color-auto-yellow-4:#ffdf5d;--color-auto-yellow-5:#ffd33d;--color-auto-yellow-6:#f9c513;--color-auto-yellow-7:#dbab09;--color-auto-yellow-8:#b08800;--color-auto-yellow-9:#735c0f;--color-auto-orange-0:#fff8f2;--color-auto-orange-1:#ffebda;--color-auto-orange-2:#ffd1ac;--color-auto-orange-3:#ffab70;--color-auto-orange-4:#fb8532;--color-auto-orange-5:#f66a0a;--color-auto-orange-6:#e36209;--color-auto-orange-7:#d15704;--color-auto-orange-8:#c24e00;--color-auto-orange-9:#a04100;--color-auto-red-0:#ffeef0;--color-auto-red-1:#ffdce0;--color-auto-red-2:#fdaeb7;--color-auto-red-3:#f97583;--color-auto-red-4:#ea4a5a;--color-auto-red-5:#d73a49;--color-auto-red-6:#cb2431;--color-auto-red-7:#b31d28;--color-auto-red-8:#9e1c23;--color-auto-red-9:#86181d;--color-auto-purple-0:#f5f0ff;--color-auto-purple-1:#e6dcfd;--color-auto-purple-2:#d1bcf9;--color-auto-purple-3:#b392f0;--color-auto-purple-4:#8a63d2;--color-auto-purple-5:#6f42c1;--color-auto-purple-6:#5a32a3;--color-auto-purple-7:#4c2889;--color-auto-purple-8:#3a1d6e;--color-auto-purple-9:#29134e;--color-auto-pink-0:#ffeef8;--color-auto-pink-1:#fedbf0;--color-auto-pink-2:#f9b3dd;--color-auto-pink-3:#f692ce;--color-auto-pink-4:#ec6cb9;--color-auto-pink-5:#ea4aaa;--color-auto-pink-6:#d03592;--color-auto-pink-7:#b93a86;--color-auto-pink-8:#99306f;--color-auto-pink-9:#6d224f;--color-text-primary:#24292e;--color-text-secondary:#586069;--color-text-tertiary:#6a737d;--color-text-placeholder:#6a737d;--color-text-disabled:#959da5;--color-text-inverse:#fff;--color-text-link:#0366d6;--color-text-danger:#cb2431;--color-text-success:#22863a;--color-text-warning:#b08800;--color-text-white:#fff;--color-icon-primary:#24292e;--color-icon-secondary:#586069;--color-icon-tertiary:#959da5;--color-icon-info:#0366d6;--color-icon-danger:#d73a49;--color-icon-success:#22863a;--color-icon-warning:#b08800;--color-border-primary:#e1e4e8;--color-border-secondary:#eaecef;--color-border-tertiary:#d1d5da;--color-border-overlay:#e1e4e8;--color-border-inverse:#fff;--color-border-info:#0366d6;--color-border-danger:#d73a49;--color-border-success:#34d058;--color-border-warning:#f9c513;--color-bg-canvas:#fff;--color-bg-canvas-mobile:#fff;--color-bg-canvas-inverse:#24292e;--color-bg-canvas-inset:#f6f8fa;--color-bg-primary:#fff;--color-bg-secondary:#fafbfc;--color-bg-tertiary:#f6f8fa;--color-bg-overlay:#fff;--color-bg-backdrop:rgba(27,31,35,0.5);--color-bg-info:#f1f8ff;--color-bg-info-inverse:#0366d6;--color-bg-danger:#ffeef0;--color-bg-danger-inverse:#d73a49;--color-bg-success:#dcffe4;--color-bg-success-inverse:#28a745;--color-bg-warning:#fff5b1;--color-bg-warning-inverse:#ffd33d;--color-shadow-small:0 1px 0 rgba(27,31,35,0.04);--color-shadow-medium:0 3px 6px rgba(149,157,165,0.15);--color-shadow-large:0 8px 24px rgba(149,157,165,0.2);--color-shadow-extra-large:0 12px 48px rgba(149,157,165,0.3);--color-shadow-highlight:inset 0 1px 0 hsla(0,0%,100%,0.25);--color-shadow-inset:inset 0 1px 0 rgba(225,228,232,0.2);--color-state-hover-primary-bg:#0366d6;--color-state-hover-primary-border:#0366d6;--color-state-hover-primary-text:#fff;--color-state-hover-primary-icon:#fff;--color-state-hover-secondary-bg:#f6f8fa;--color-state-hover-secondary-border:#f6f8fa;--color-state-selected-primary-bg:#0366d6;--color-state-selected-primary-border:#0366d6;--color-state-selected-primary-text:#fff;--color-state-selected-primary-icon:#fff;--color-state-focus-border:#0366d6;--color-state-focus-shadow:0 0 0 3px rgba(3,102,214,0.3);--color-fade-fg-10:rgba(27,31,35,0.1);--color-fade-fg-15:rgba(27,31,35,0.15);--color-fade-fg-30:rgba(27,31,35,0.3);--color-fade-fg-50:rgba(27,31,35,0.5);--color-fade-fg-70:rgba(27,31,35,0.7);--color-fade-fg-85:rgba(27,31,35,0.85);--color-fade-black-10:rgba(27,31,35,0.1);--color-fade-black-15:rgba(27,31,35,0.15);--color-fade-black-30:rgba(27,31,35,0.3);--color-fade-black-50:rgba(27,31,35,0.5);--color-fade-black-70:rgba(27,31,35,0.7);--color-fade-black-85:rgba(27,31,35,0.85);--color-fade-white-10:hsla(0,0%,100%,0.1);--color-fade-white-15:hsla(0,0%,100%,0.15);--color-fade-white-30:hsla(0,0%,100%,0.3);--color-fade-white-50:hsla(0,0%,100%,0.5);--color-fade-white-70:hsla(0,0%,100%,0.7);--color-fade-white-85:hsla(0,0%,100%,0.85);--color-alert-info-text:#24292e;--color-alert-info-icon:rgba(4,66,137,0.6);--color-alert-info-bg:#dbedff;--color-alert-info-border:rgba(4,66,137,0.2);--color-alert-warn-text:#24292e;--color-alert-warn-icon:#b08800;--color-alert-warn-bg:#fffbdd;--color-alert-warn-border:rgba(176,136,0,0.2);--color-alert-error-text:#24292e;--color-alert-error-icon:rgba(158,28,35,0.6);--color-alert-error-bg:#ffe3e6;--color-alert-error-border:rgba(158,28,35,0.2);--color-alert-success-text:#24292e;--color-alert-success-icon:rgba(23,111,44,0.8);--color-alert-success-bg:#dcffe4;--color-alert-success-border:rgba(23,111,44,0.2);--color-autocomplete-shadow:0 3px 6px rgba(149,157,165,0.15);--color-autocomplete-row-border:#eaecef;--color-blankslate-icon:#a3aab1;--color-btn-text:#24292e;--color-btn-bg:#fafbfc;--color-btn-border:rgba(27,31,35,0.15);--color-btn-shadow:0 1px 0 rgba(27,31,35,0.04);--color-btn-inset-shadow:inset 0 1px 0 hsla(0,0%,100%,0.25);--color-btn-hover-bg:#f3f4f6;--color-btn-hover-border:rgba(27,31,35,0.15);--color-btn-selected-bg:#edeff2;--color-btn-focus-bg:#fafbfc;--color-btn-focus-border:rgba(27,31,35,0.15);--color-btn-focus-shadow:0 0 0 3px rgba(3,102,214,0.3);--color-btn-shadow-active:inset 0 0.15em 0.3em rgba(27,31,35,0.15);--color-btn-shadow-input-focus:0 0 0 0.2em rgba(3,102,214,0.3);--color-btn-primary-text:#fff;--color-btn-primary-bg:#2ea44f;--color-btn-primary-border:rgba(27,31,35,0.15);--color-btn-primary-shadow:0 1px 0 rgba(27,31,35,0.1);--color-btn-primary-inset-shadow:inset 0 1px 0 hsla(0,0%,100%,0.03);--color-btn-primary-hover-bg:#2c974b;--color-btn-primary-hover-border:rgba(27,31,35,0.15);--color-btn-primary-selected-bg:#2a8f47;--color-btn-primary-selected-shadow:inset 0 1px 0 rgba(20,70,32,0.2);--color-btn-primary-disabled-text:hsla(0,0%,100%,0.8);--color-btn-primary-disabled-bg:#94d3a2;--color-btn-primary-disabled-border:rgba(27,31,35,0.1);--color-btn-primary-focus-bg:#2ea44f;--color-btn-primary-focus-border:rgba(27,31,35,0.15);--color-btn-primary-focus-shadow:0 0 0 3px rgba(46,164,79,0.4);--color-btn-primary-icon:hsla(0,0%,100%,0.8);--color-btn-primary-counter-bg:hsla(0,0%,100%,0.2);--color-btn-outline-text:#0366d6;--color-btn-outline-hover-text:#fff;--color-btn-outline-hover-bg:#0366d6;--color-btn-outline-hover-border:rgba(27,31,35,0.15);--color-btn-outline-hover-shadow:0 1px 0 rgba(27,31,35,0.1);--color-btn-outline-hover-inset-shadow:inset 0 1px 0 hsla(0,0%,100%,0.03);--color-btn-outline-hover-counter-bg:hsla(0,0%,100%,0.2);--color-btn-outline-selected-text:#fff;--color-btn-outline-selected-bg:#035fc7;--color-btn-outline-selected-border:rgba(27,31,35,0.15);--color-btn-outline-selected-shadow:inset 0 1px 0 rgba(5,38,76,0.2);--color-btn-outline-disabled-text:rgba(3,102,214,0.5);--color-btn-outline-disabled-bg:#fafbfc;--color-btn-outline-disabled-counter-bg:rgba(3,102,214,0.05);--color-btn-outline-focus-border:rgba(27,31,35,0.15);--color-btn-outline-focus-shadow:0 0 0 3px rgba(0,92,197,0.4);--color-btn-outline-counter-bg:rgba(3,102,214,0.1);--color-btn-danger-text:#d73a49;--color-btn-danger-hover-text:#fff;--color-btn-danger-hover-bg:#cb2431;--color-btn-danger-hover-border:rgba(27,31,35,0.15);--color-btn-danger-hover-shadow:0 1px 0 rgba(27,31,35,0.1);--color-btn-danger-hover-inset-shadow:inset 0 1px 0 hsla(0,0%,100%,0.03);--color-btn-danger-hover-counter-bg:hsla(0,0%,100%,0.2);--color-btn-danger-selected-text:#fff;--color-btn-danger-selected-bg:#d42d3d;--color-btn-danger-selected-border:rgba(27,31,35,0.15);--color-btn-danger-selected-shadow:inset 0 1px 0 rgba(134,24,29,0.2);--color-btn-danger-disabled-text:rgba(215,58,73,0.5);--color-btn-danger-disabled-bg:#fafbfc;--color-btn-danger-disabled-counter-bg:rgba(215,58,73,0.05);--color-btn-danger-focus-border:rgba(27,31,35,0.15);--color-btn-danger-focus-shadow:0 0 0 3px rgba(203,36,49,0.4);--color-btn-danger-counter-bg:rgba(215,58,73,0.1);--color-btn-danger-icon:#d73a49;--color-btn-danger-hover-icon:#fff;--color-btn-counter-bg:rgba(27,31,35,0.08);--color-counter-text:#24292e;--color-counter-bg:rgba(209,213,218,0.5);--color-counter-primary-text:#fff;--color-counter-primary-bg:#6a737d;--color-counter-secondary-text:#6a737d;--color-counter-secondary-bg:rgba(209,213,218,0.5);--color-dropdown-shadow:0 8px 24px rgba(149,157,165,0.2);--color-label-border:#e1e4e8;--color-label-primary-text:#24292e;--color-label-primary-border:#6a737d;--color-label-secondary-text:#586069;--color-label-secondary-border:#e1e4e8;--color-label-info-text:#0366d6;--color-label-info-border:#0366d6;--color-label-success-text:#22863a;--color-label-success-border:#28a745;--color-label-warning-text:#735c0f;--color-label-warning-border:#b08800;--color-label-danger-text:#d73a49;--color-label-danger-border:#cb2431;--color-label-orange-text:#c24e00;--color-label-orange-border:#f66a0a;--color-input-bg:#fff;--color-input-contrast-bg:#fafbfc;--color-input-border:#e1e4e8;--color-input-shadow:inset 0 1px 2px rgba(27,31,35,0.075);--color-input-disabled-bg:#f6f8fa;--color-input-disabled-border:#e1e4e8;--color-input-warning-border:#f9c513;--color-input-error-border:#cb2431;--color-input-tooltip-success-text:#144620;--color-input-tooltip-success-bg:#dcffe4;--color-input-tooltip-success-border:#34d058;--color-input-tooltip-warning-text:#735c0f;--color-input-tooltip-warning-bg:#fff5b1;--color-input-tooltip-warning-border:#f9c513;--color-input-tooltip-error-text:#86181d;--color-input-tooltip-error-bg:#ffeef0;--color-input-tooltip-error-border:#f97583;--color-avatar-bg:#fff;--color-avatar-border:transparent;--color-avatar-stack-fade:#d1d5da;--color-avatar-stack-fade-more:#e1e4e8;--color-avatar-child-shadow:-2px -2px 0 hsla(0,0%,100%,0.8);--color-toast-text:#24292e;--color-toast-bg:#fff;--color-toast-border:#e1e4e8;--color-toast-shadow:0 8px 24px rgba(149,157,165,0.2);--color-toast-icon:#fff;--color-toast-icon-bg:#0366d6;--color-toast-icon-border:transparent;--color-toast-success-text:#24292e;--color-toast-success-border:#e1e4e8;--color-toast-success-icon:#fff;--color-toast-success-icon-bg:#28a745;--color-toast-success-icon-border:transparent;--color-toast-warning-text:#24292e;--color-toast-warning-border:#e1e4e8;--color-toast-warning-icon:#24292e;--color-toast-warning-icon-bg:#ffd33d;--color-toast-warning-icon-border:transparent;--color-toast-danger-text:#24292e;--color-toast-danger-border:#e1e4e8;--color-toast-danger-icon:#fff;--color-toast-danger-icon-bg:#d73a49;--color-toast-danger-icon-border:transparent;--color-toast-loading-text:#24292e;--color-toast-loading-border:#e1e4e8;--color-toast-loading-icon:#fff;--color-toast-loading-icon-bg:#586069;--color-toast-loading-icon-border:transparent;--color-timeline-text:#444d56;--color-timeline-badge-bg:#e1e4e8;--color-timeline-badge-success-border:transparent;--color-timeline-target-badge-border:#2188ff;--color-timeline-target-badge-shadow:#c8e1ff;--color-select-menu-border-secondary:#eaecef;--color-select-menu-shadow:0 0 18px rgba(27,31,35,0.4);--color-select-menu-backdrop-bg:rgba(27,31,35,0.5);--color-select-menu-backdrop-border:transparent;--color-select-menu-tap-highlight:rgba(209,213,218,0.5);--color-select-menu-tap-focus-bg:#dbedff;--color-box-blue-border:#c8e1ff;--color-box-row-yellow-bg:#fffbdd;--color-box-row-blue-bg:#f1f8ff;--color-box-header-blue-bg:#f1f8ff;--color-box-header-blue-border:#c8e1ff;--color-box-border-info:rgba(3,102,214,0.2);--color-box-bg-info:#f1f8ff;--color-box-border-warning:rgba(255,211,61,0.4);--color-box-bg-warning:#fffdef;--color-branch-name-text:#586069;--color-branch-name-icon:#a8bbd0;--color-branch-name-bg:#eaf5ff;--color-branch-name-link-text:#0366d6;--color-branch-name-link-icon:#a8bbd0;--color-branch-name-link-bg:#eaf5ff;--color-markdown-code-bg:rgba(27,31,35,0.05);--color-markdown-frame-border:#dfe2e5;--color-markdown-blockquote-border:#dfe2e5;--color-markdown-table-border:#dfe2e5;--color-markdown-table-tr-border:#c6cbd1;--color-menu-heading-text:#24292e;--color-menu-border-active:#f9826c;--color-menu-bg-active:transparent;--color-sidenav-selected-bg:#fff;--color-sidenav-border-active:#f9826c;--color-header-text:hsla(0,0%,100%,0.7);--color-header-bg:#24292e;--color-header-logo:#fff;--color-filter-item-bar-bg:#eff3f6;--color-hidden-text-expander-bg:#dfe2e5;--color-hidden-text-expander-bg-hover:#c6cbd1;--color-drag-and-drop-border:#c3c8cf;--color-upload-enabled-border:#dfe2e5;--color-upload-enabled-border-focused:#4a9eff;--color-previewable-comment-form-border:#c3c8cf;--color-underlinenav-border:rgba(209,213,218,0);--color-underlinenav-border-hover:#d1d5da;--color-underlinenav-border-active:#f9826c;--color-underlinenav-text:#24292e;--color-underlinenav-text-hover:#24292e;--color-underlinenav-text-active:#24292e;--color-underlinenav-icon:#959da5;--color-underlinenav-icon-hover:#959da5;--color-underlinenav-icon-active:#24292e;--color-underlinenav-counter-text:#24292e;--color-underlinenav-counter-bg:rgba(209,213,218,0.5);--color-verified-badge-text:#22863a;--color-verified-badge-bg:#fff;--color-verified-badge-border:#e1e4e8;--color-social-count-bg:#fff;--color-tooltip-text:#fff;--color-tooltip-bg:#24292e;--color-header-search-bg:#24292e;--color-header-search-border:#444d56;--color-search-keyword-hl:#fffbdd;--color-diffstat-neutral-bg:#d1d5da;--color-diffstat-neutral-border:#d1d5da;--color-diffstat-deletion-bg:#d73a49;--color-diffstat-deletion-border:#d73a49;--color-diffstat-addition-bg:#28a745;--color-diffstat-addition-border:#28a745;--color-mktg-success:#2ebc4f;--color-mktg-info:#1074e7;--color-mktg-bg-shade-gradient-top:rgba(27,31,35,0.065);--color-mktg-bg-shade-gradient-bottom:rgba(27,31,35,0);--color-mktg-btn-bg:#3076df;--color-mktg-btn-border:#3076df;--color-mktg-btn-text:#fff;--color-mktg-btn-icon:#fff;--color-mktg-btn-focus-shadow:0 0 0 3px rgba(48,118,223,0.3);--color-mktg-btn-hover-bg:#0366d6;--color-mktg-btn-hover-border:#0366d6;--color-mktg-btn-disabled-bg:rgba(48,118,223,0.5);--color-mktg-btn-disabled-border:transparent;--color-mktg-btn-disabled-text:#fff;--color-mktg-btn-disabled-icon:#fff;--color-mktg-btn-primary-bg:#5eb85c;--color-mktg-btn-primary-border:#5eb85c;--color-mktg-btn-primary-text:#fff;--color-mktg-btn-primary-icon:#fff;--color-mktg-btn-primary-focus-shadow:0 0 0 3px rgba(94,184,92,0.3);--color-mktg-btn-primary-hover-bg:#28a745;--color-mktg-btn-primary-hover-border:#28a745;--color-mktg-btn-primary-disabled-bg:rgba(94,184,92,0.5);--color-mktg-btn-primary-disabled-border:transparent;--color-mktg-btn-primary-disabled-text:#fff;--color-mktg-btn-primary-disabled-icon:#fff;--color-mktg-btn-outline-bg:transparent;--color-mktg-btn-outline-border:rgba(42,103,195,0.5);--color-mktg-btn-outline-text:#3076df;--color-mktg-btn-outline-icon:#3076df;--color-mktg-btn-outline-focus-shadow:0 0 0 3px rgba(42,103,195,0.3);--color-mktg-btn-outline-hover-bg:transparent;--color-mktg-btn-outline-hover-border:#0366d6;--color-mktg-btn-outline-hover-text:#0366d6;--color-mktg-btn-outline-hover-icon:#0366d6;--color-mktg-btn-outline-disabled-bg:transparent;--color-mktg-btn-outline-disabled-border:rgba(42,103,195,0.2);--color-mktg-btn-outline-disabled-text:rgba(48,118,223,0.5);--color-mktg-btn-outline-disabled-icon:rgba(48,118,223,0.5);--color-mktg-btn-dark-bg:transparent;--color-mktg-btn-dark-border:hsla(0,0%,100%,0.5);--color-mktg-btn-dark-text:#fff;--color-mktg-btn-dark-icon:#fff;--color-mktg-btn-dark-focus-shadow:0 0 0 3px hsla(0,0%,100%,0.3);--color-mktg-btn-dark-hover-bg:#fff;--color-mktg-btn-dark-hover-border:#fff;--color-mktg-btn-dark-hover-text:#444d56;--color-mktg-btn-dark-hover-icon:#444d56;--color-mktg-btn-dark-disabled-bg:transparent;--color-mktg-btn-dark-disabled-border:hsla(0,0%,100%,0.2);--color-mktg-btn-dark-disabled-text:hsla(0,0%,100%,0.5);--color-mktg-btn-dark-disabled-icon:hsla(0,0%,100%,0.5);--color-files-explorer-icon:#79b8ff;--color-hl-author-bg:#f1f8ff;--color-hl-author-border:#c8e1ff;--color-logo-subdued:#d1d5da;--color-discussion-border:#a2cbac;--color-discussion-bg-success:#28a745;--color-actions-workflow-table-sticky-bg:hsla(0,0%,100%,0.95);--color-repo-language-color-border:rgba(27,31,35,0.1);--color-code-selection-bg:#c8e1ff;--color-highlight-text:#442c12;--color-highlight-bg:#fff0bb;--color-blob-line-highlight-bg:#fffbdd;--color-blob-line-highlight-border:transparent;--color-diff-addition-text:#22863a;--color-diff-addition-bg:#e6ffed;--color-diff-addition-border:#34d058;--color-diff-deletion-text:#cb2431;--color-diff-deletion-bg:#ffeef0;--color-diff-deletion-border:#d73a49;--color-diff-change-text:#b08800;--color-diff-change-bg:#fff5b1;--color-diff-change-border:#f9c513;--color-diff-blob-num-text:rgba(27,31,35,0.3);--color-diff-blob-num-hover-text:rgba(27,31,35,0.6);--color-diff-blob-addition-num-text:rgba(27,31,35,0.3);--color-diff-blob-addition-num-hover-text:rgba(27,31,35,0.6);--color-diff-blob-addition-num-bg:#cdffd8;--color-diff-blob-addition-line-bg:#e6ffed;--color-diff-blob-addition-word-bg:#acf2bd;--color-diff-blob-deletion-num-text:rgba(27,31,35,0.3);--color-diff-blob-deletion-num-hover-text:rgba(27,31,35,0.6);--color-diff-blob-deletion-num-bg:#ffdce0;--color-diff-blob-deletion-line-bg:#ffeef0;--color-diff-blob-deletion-word-bg:#fdb8c0;--color-diff-blob-hunk-text:rgba(27,31,35,0.7);--color-diff-blob-hunk-num-bg:#dbedff;--color-diff-blob-hunk-line-bg:#f1f8ff;--color-diff-blob-empty-block-bg:#fafbfc;--color-diff-blob-selected-line-highlight-bg:rgba(255,223,93,0.2);--color-diff-blob-selected-line-highlight-border:#ffd33d;--color-diff-blob-selected-line-highlight-mix-blend-mode:multiply;--color-diff-blob-expander-icon:#586069;--color-diff-blob-expander-hover-icon:#fff;--color-diff-blob-expander-hover-bg:#0366d6;--color-diff-blob-comment-button-icon:#fff;--color-diff-blob-comment-button-bg:#0366d6;--color-diff-blob-comment-button-gradient-bg:#0372ef;--color-global-nav-logo:#fff;--color-global-nav-bg:#24292e;--color-global-nav-text:#fff;--color-global-nav-icon:#fff;--color-global-nav-input-bg:#fafbfc;--color-global-nav-input-border:#fafbfc;--color-global-nav-input-icon:#d1d5da;--color-global-nav-input-placeholder:#959da5;--color-calendar-graph-day-bg:#ebedf0;--color-calendar-graph-day-border:rgba(27,31,35,0.06);--color-calendar-graph-day-L1-bg:#9be9a8;--color-calendar-graph-day-L2-bg:#40c463;--color-calendar-graph-day-L3-bg:#30a14e;--color-calendar-graph-day-L4-bg:#216e39;--color-calendar-graph-day-L4-border:rgba(27,31,35,0.06);--color-calendar-graph-day-L3-border:rgba(27,31,35,0.06);--color-calendar-graph-day-L2-border:rgba(27,31,35,0.06);--color-calendar-graph-day-L1-border:rgba(27,31,35,0.06);--color-footer-invertocat-octicon:#d1d5da;--color-footer-invertocat-octicon-hover:#6a737d;--color-pr-state-draft-text:#fff;--color-pr-state-draft-bg:#6a737d;--color-pr-state-draft-border:transparent;--color-pr-state-open-text:#fff;--color-pr-state-open-bg:#28a745;--color-pr-state-open-border:transparent;--color-pr-state-merged-text:#fff;--color-pr-state-merged-bg:#6f42c1;--color-pr-state-merged-border:transparent;--color-pr-state-closed-text:#fff;--color-pr-state-closed-bg:#d73a49;--color-pr-state-closed-border:transparent;--color-topic-tag-text:#0366d6;--color-topic-tag-bg:#f1f8ff;--color-topic-tag-hover-bg:#def;--color-topic-tag-active-bg:#e7f3ff;--color-merge-box-success-icon-bg:#28a745;--color-merge-box-success-icon-text:#fff;--color-merge-box-success-icon-border:transparent;--color-merge-box-success-indicator-bg:#28a745;--color-merge-box-success-indicator-border:transparent;--color-merge-box-merged-icon-bg:#6f42c1;--color-merge-box-merged-icon-text:#fff;--color-merge-box-merged-icon-border:transparent;--color-merge-box-merged-box-border:#6f42c1;--color-merge-box-neutral-icon-bg:#6a737d;--color-merge-box-neutral-icon-text:#fff;--color-merge-box-neutral-icon-border:transparent;--color-merge-box-neutral-indicator-bg:#6a737d;--color-merge-box-neutral-indicator-border:transparent;--color-merge-box-warning-icon-bg:#dbab09;--color-merge-box-warning-icon-text:#fff;--color-merge-box-warning-icon-border:transparent;--color-merge-box-warning-box-border:#ffd33d;--color-merge-box-warning-merge-highlight:transparent;--color-merge-box-error-icon-bg:#d73a49;--color-merge-box-error-icon-text:#fff;--color-merge-box-error-icon-border:transparent;--color-merge-box-error-indicator-bg:#d73a49;--color-merge-box-error-indicator-border:transparent;--color-project-card-bg:#fff;--color-project-header-bg:#24292e;--color-project-sidebar-bg:#fff;--color-project-gradient-in:#fff;--color-project-gradient-out:hsla(0,0%,100%,0);--color-checks-bg:#24292e;--color-checks-run-border-width:0px;--color-checks-container-border-width:0px;--color-checks-text-primary:#fafbfc;--color-checks-text-secondary:#959da5;--color-checks-text-link:#79b8ff;--color-checks-btn-icon:#d1d5da;--color-checks-btn-hover-icon:#fafbfc;--color-checks-btn-hover-bg:hsla(0,0%,100%,0.125);--color-checks-input-text:#f6f8fa;--color-checks-input-placeholder-text:#959da5;--color-checks-input-focus-text:#959da5;--color-checks-input-bg:#2f363d;--color-checks-input-shadow:none;--color-checks-dropdown-text:#d1d5da;--color-checks-dropdown-bg:#2f363d;--color-checks-dropdown-border:#444d56;--color-checks-dropdown-hover-text:#fafbfc;--color-checks-dropdown-hover-bg:#444d56;--color-checks-dropdown-btn-hover-text:#fafbfc;--color-checks-dropdown-btn-hover-bg:#2f363d;--color-checks-scrollbar-thumb-bg:#586069;--color-checks-header-label-text:#e1e4e8;--color-checks-header-label-open-text:#fafbfc;--color-checks-header-border:#2f363d;--color-checks-header-icon:#959da5;--color-checks-line-text:#e1e4e8;--color-checks-line-num-text:rgba(149,157,165,0.75);--color-checks-line-timestamp-text:#959da5;--color-checks-line-hover-bg:#2f363d;--color-checks-line-selected-bg:rgba(33,136,255,0.15);--color-checks-line-selected-num-text:#79b8ff;--color-checks-line-dt-fm-text:#24292e;--color-checks-line-dt-fm-bg:#ffd33d;--color-checks-gate-bg:rgba(249,197,19,0.15);--color-checks-gate-text:#e1e4e8;--color-checks-gate-waiting-text:#d1d5da;--color-checks-step-header-open-bg:#2f363d;--color-checks-step-error-text:#f97583;--color-checks-step-warning-text:#ffea7f;--color-checks-logline-text:#959da5;--color-checks-logline-num-text:rgba(149,157,165,0.75);--color-checks-logline-debug-text:#b392f0;--color-checks-logline-error-text:#e1e4e8;--color-checks-logline-error-num-text:#f97583;--color-checks-logline-error-bg:rgba(203,36,49,0.15);--color-checks-logline-warning-text:#e1e4e8;--color-checks-logline-warning-num-text:#ffea7f;--color-checks-logline-warning-bg:rgba(249,197,19,0.15);--color-checks-logline-command-text:#79b8ff;--color-checks-logline-section-text:#85e89d;--color-intro-shelf-gradient-left:#f1f8ff;--color-intro-shelf-gradient-right:#dcffe4;--color-intro-shelf-gradient-in:#fff;--color-intro-shelf-gradient-out:hsla(0,0%,100%,0);--color-marketing-icon-primary:#2188ff;--color-marketing-icon-secondary:#79b8ff;--color-prettylights-syntax-comment:#6a737d;--color-prettylights-syntax-constant:#005cc5;--color-prettylights-syntax-entity:#6f42c1;--color-prettylights-syntax-storage-modifier-import:#24292e;--color-prettylights-syntax-entity-tag:#22863a;--color-prettylights-syntax-keyword:#d73a49;--color-prettylights-syntax-string:#032f62;--color-prettylights-syntax-variable:#e36209;--color-prettylights-syntax-brackethighlighter-unmatched:#b31d28;--color-prettylights-syntax-invalid-illegal-text:#fafbfc;--color-prettylights-syntax-invalid-illegal-bg:#b31d28;--color-prettylights-syntax-carriage-return-text:#fafbfc;--color-prettylights-syntax-carriage-return-bg:#d73a49;--color-prettylights-syntax-string-regexp:#22863a;--color-prettylights-syntax-markup-list:#735c0f;--color-prettylights-syntax-markup-heading:#005cc5;--color-prettylights-syntax-markup-italic:#24292e;--color-prettylights-syntax-markup-bold:#24292e;--color-prettylights-syntax-markup-deleted-text:#b31d28;--color-prettylights-syntax-markup-deleted-bg:#ffeef0;--color-prettylights-syntax-markup-inserted-text:#22863a;--color-prettylights-syntax-markup-inserted-bg:#f0fff4;--color-prettylights-syntax-markup-changed-text:#e36209;--color-prettylights-syntax-markup-changed-bg:#ffebda;--color-prettylights-syntax-markup-ignored-text:#f6f8fa;--color-prettylights-syntax-markup-ignored-bg:#005cc5;--color-prettylights-syntax-meta-diff-range:#6f42c1;--color-prettylights-syntax-brackethighlighter-angle:#586069;--color-prettylights-syntax-sublimelinter-gutter-mark:#959da5;--color-prettylights-syntax-constant-other-reference-link:#032f62;--color-codemirror-text:#24292e;--color-codemirror-bg:#fff;--color-codemirror-gutters-bg:#fff;--color-codemirror-guttermarker-text:#fff;--color-codemirror-guttermarker-subtle-text:#d1d5da;--color-codemirror-linenumber-text:#959da5;--color-codemirror-cursor:#24292e;--color-codemirror-selection-bg:#c8e1ff;--color-codemirror-activeline-bg:#fafbfc;--color-codemirror-matchingbracket-text:#24292e;--color-codemirror-lines-bg:#fff;--color-codemirror-syntax-comment:#6a737d;--color-codemirror-syntax-constant:#005cc5;--color-codemirror-syntax-entity:#6f42c1;--color-codemirror-syntax-keyword:#d73a49;--color-codemirror-syntax-storage:#d73a49;--color-codemirror-syntax-string:#032f62;--color-codemirror-syntax-support:#005cc5;--color-codemirror-syntax-variable:#e36209;--color-ansi-black:#24292e;--color-ansi-black-bright:#2f363d;--color-ansi-white:#e1e4e8;--color-ansi-white-bright:#e1e4e8;--color-ansi-gray:#959da5;--color-ansi-red:#f97583;--color-ansi-red-bright:#fdaeb7;--color-ansi-green:#85e89d;--color-ansi-green-bright:#bef5cb;--color-ansi-yellow:#ffea7f;--color-ansi-yellow-bright:#fff5b1;--color-ansi-blue:#79b8ff;--color-ansi-blue-bright:#c8e1ff;--color-ansi-magenta:#b392f0;--color-ansi-magenta-bright:#d1bcf9;--color-ansi-cyan:#76e3ea;--color-ansi-cyan-bright:#b3f0ff}.gist :root{--border-width:1px;--border-style:solid;--font-size-small:12px;--font-weight-semibold:500;--size-2:20px}.gist .markdown-body{font-family:-apple-system,BlinkMacSystemFont,Segoe UI,Helvetica,Arial,sans-serif,Apple Color Emoji,Segoe UI Emoji;font-size:16px;line-height:1.5;word-wrap:break-word}.gist .markdown-body kbd{display:inline-block;padding:3px 5px;font:11px SFMono-Regular,Consolas,Liberation Mono,Menlo,monospace;line-height:10px;color:var(--color-auto-gray-7);vertical-align:middle;background-color:var(--color-bg-secondary);border-bottom-color:var(--color-border-tertiary);border:1px solid var(--color-border-tertiary);border-radius:6px;box-shadow:inset 0 -1px 0 var(--color-border-tertiary)}.gist .markdown-body:before{display:table;content:""}.gist .markdown-body:after{display:table;clear:both;content:""}.gist .markdown-body>:first-child{margin-top:0!important}.gist .markdown-body>:last-child{margin-bottom:0!important}.gist .markdown-body a:not([href]){color:inherit;text-decoration:none}.gist .markdown-body .absent{color:var(--color-text-danger)}.gist .markdown-body .anchor{float:left;padding-right:4px;margin-left:-20px;line-height:1}.gist .markdown-body .anchor:focus{outline:none}.gist .markdown-body blockquote,.gist .markdown-body details,.gist .markdown-body dl,.gist .markdown-body ol,.gist .markdown-body p,.gist .markdown-body pre,.gist .markdown-body table,.gist .markdown-body ul{margin-top:0;margin-bottom:16px}.gist .markdown-body hr{height:.25em;padding:0;margin:24px 0;background-color:var(--color-border-primary);border:0}.gist .markdown-body blockquote{padding:0 1em;color:var(--color-text-tertiary);border-left:.25em solid var(--color-markdown-blockquote-border)}.gist .markdown-body blockquote>:first-child{margin-top:0}.gist .markdown-body blockquote>:last-child{margin-bottom:0}.gist .markdown-body h1,.gist .markdown-body h2,.gist .markdown-body h3,.gist .markdown-body h4,.gist .markdown-body h5,.gist .markdown-body h6{margin-top:24px;margin-bottom:16px;font-weight:600;line-height:1.25}.gist .markdown-body h1 .octicon-link,.gist .markdown-body h2 .octicon-link,.gist .markdown-body h3 .octicon-link,.gist .markdown-body h4 .octicon-link,.gist .markdown-body h5 .octicon-link,.gist .markdown-body h6 .octicon-link{color:var(--color-text-primary);vertical-align:middle;visibility:hidden}.gist .markdown-body h1:hover .anchor,.gist .markdown-body h2:hover .anchor,.gist .markdown-body h3:hover .anchor,.gist .markdown-body h4:hover .anchor,.gist .markdown-body h5:hover .anchor,.gist .markdown-body h6:hover .anchor{text-decoration:none}.gist .markdown-body h1:hover .anchor .octicon-link,.gist .markdown-body h2:hover .anchor .octicon-link,.gist .markdown-body h3:hover .anchor .octicon-link,.gist .markdown-body h4:hover .anchor .octicon-link,.gist .markdown-body h5:hover .anchor .octicon-link,.gist .markdown-body h6:hover .anchor .octicon-link{visibility:visible}.gist .markdown-body h1 code,.gist .markdown-body h1 tt,.gist .markdown-body h2 code,.gist .markdown-body h2 tt,.gist .markdown-body h3 code,.gist .markdown-body h3 tt,.gist .markdown-body h4 code,.gist .markdown-body h4 tt,.gist .markdown-body h5 code,.gist .markdown-body h5 tt,.gist .markdown-body h6 code,.gist .markdown-body h6 tt{font-size:inherit}.gist .markdown-body h1{font-size:2em}.gist .markdown-body h1,.gist .markdown-body h2{padding-bottom:.3em;border-bottom:1px solid var(--color-border-secondary)}.gist .markdown-body h2{font-size:1.5em}.gist .markdown-body h3{font-size:1.25em}.gist .markdown-body h4{font-size:1em}.gist .markdown-body h5{font-size:.875em}.gist .markdown-body h6{font-size:.85em;color:var(--color-text-tertiary)}.gist .markdown-body ol,.gist .markdown-body ul{padding-left:2em}.gist .markdown-body ol.no-list,.gist .markdown-body ul.no-list{padding:0;list-style-type:none}.gist .markdown-body ol ol,.gist .markdown-body ol ul,.gist .markdown-body ul ol,.gist .markdown-body ul ul{margin-top:0;margin-bottom:0}.gist .markdown-body li>p{margin-top:16px}.gist .markdown-body li+li{margin-top:.25em}.gist .markdown-body dl{padding:0}.gist .markdown-body dl dt{padding:0;margin-top:16px;font-size:1em;font-style:italic;font-weight:600}.gist .markdown-body dl dd{padding:0 16px;margin-bottom:16px}.gist .markdown-body table{display:block;width:100%;width:-webkit-max-content;width:-moz-max-content;width:max-content;max-width:100%;overflow:auto}.gist .markdown-body table th{font-weight:600}.gist .markdown-body table td,.gist .markdown-body table th{padding:6px 13px;border:1px solid var(--color-markdown-table-border)}.gist .markdown-body table tr{background-color:var(--color-bg-primary);border-top:1px solid var(--color-markdown-table-tr-border)}.gist .markdown-body table tr:nth-child(2n){background-color:var(--color-bg-tertiary)}.gist .markdown-body table img{background-color:initial}.gist .markdown-body img{max-width:100%;box-sizing:initial;background-color:var(--color-bg-primary)}.gist .markdown-body img[align=right]{padding-left:20px}.gist .markdown-body img[align=left]{padding-right:20px}.gist .markdown-body .emoji{max-width:none;vertical-align:text-top;background-color:initial}.gist .markdown-body span.frame{display:block;overflow:hidden}.gist .markdown-body span.frame>span{display:block;float:left;width:auto;padding:7px;margin:13px 0 0;overflow:hidden;border:1px solid var(--color-markdown-frame-border)}.gist .markdown-body span.frame span img{display:block;float:left}.gist .markdown-body span.frame span span{display:block;padding:5px 0 0;clear:both;color:var(--color-text-primary)}.gist .markdown-body span.align-center{display:block;overflow:hidden;clear:both}.gist .markdown-body span.align-center>span{display:block;margin:13px auto 0;overflow:hidden;text-align:center}.gist .markdown-body span.align-center span img{margin:0 auto;text-align:center}.gist .markdown-body span.align-right{display:block;overflow:hidden;clear:both}.gist .markdown-body span.align-right>span{display:block;margin:13px 0 0;overflow:hidden;text-align:right}.gist .markdown-body span.align-right span img{margin:0;text-align:right}.gist .markdown-body span.float-left{display:block;float:left;margin-right:13px;overflow:hidden}.gist .markdown-body span.float-left span{margin:13px 0 0}.gist .markdown-body span.float-right{display:block;float:right;margin-left:13px;overflow:hidden}.gist .markdown-body span.float-right>span{display:block;margin:13px auto 0;overflow:hidden;text-align:right}.gist .markdown-body code,.gist .markdown-body tt{padding:.2em .4em;margin:0;font-size:85%;background-color:var(--color-markdown-code-bg);border-radius:6px}.gist .markdown-body code br,.gist .markdown-body tt br{display:none}.gist .markdown-body del code{text-decoration:inherit}.gist .markdown-body pre{word-wrap:normal}.gist .markdown-body pre>code{padding:0;margin:0;font-size:100%;word-break:normal;white-space:pre;background:transparent;border:0}.gist .markdown-body .highlight{margin-bottom:16px}.gist .markdown-body .highlight pre{margin-bottom:0;word-break:normal}.gist .markdown-body .highlight pre,.gist .markdown-body pre{padding:16px;overflow:auto;font-size:85%;line-height:1.45;background-color:var(--color-bg-tertiary);border-radius:6px}.gist .markdown-body pre code,.gist .markdown-body pre tt{display:inline;max-width:auto;padding:0;margin:0;overflow:visible;line-height:inherit;word-wrap:normal;background-color:initial;border:0}.gist .markdown-body .csv-data td,.gist .markdown-body .csv-data th{padding:5px;overflow:hidden;font-size:12px;line-height:1;text-align:left;white-space:nowrap}.gist .markdown-body .csv-data .blob-num{padding:10px 8px 9px;text-align:right;background:var(--color-bg-primary);border:0}.gist .markdown-body .csv-data tr{border-top:0}.gist .markdown-body .csv-data th{font-weight:600;background:var(--color-bg-tertiary);border-top:0}.gist .pl-c{color:#6a737d}.gist .pl-c1,.gist .pl-s .pl-v{color:#005cc5}.gist .pl-e,.gist .pl-en{color:#6f42c1}.gist .pl-s .pl-s1,.gist .pl-smi{color:#24292e}.gist .pl-ent{color:#22863a}.gist .pl-k{color:#d73a49}.gist .pl-pds,.gist .pl-s,.gist .pl-s .pl-pse .pl-s1,.gist .pl-sr,.gist .pl-sr .pl-cce,.gist .pl-sr .pl-sra,.gist .pl-sr .pl-sre{color:#032f62}.gist .pl-smw,.gist .pl-v{color:#e36209}.gist .pl-bu{color:#b31d28}.gist .pl-ii{color:#fafbfc;background-color:#b31d28}.gist .pl-c2{color:#fafbfc;background-color:#d73a49}.gist .pl-c2:before{content:"^M"}.gist .pl-sr .pl-cce{font-weight:700;color:#22863a}.gist .pl-ml{color:#735c0f}.gist .pl-mh,.gist .pl-mh .pl-en,.gist .pl-ms{font-weight:700;color:#005cc5}.gist .pl-mi{font-style:italic;color:#24292e}.gist .pl-mb{font-weight:700;color:#24292e}.gist .pl-md{color:#b31d28;background-color:#ffeef0}.gist .pl-mi1{color:#22863a;background-color:#f0fff4}.gist .pl-mc{color:#e36209;background-color:#ffebda}.gist .pl-mi2{color:#f6f8fa;background-color:#005cc5}.gist .pl-mdr{font-weight:700;color:#6f42c1}.gist .pl-ba{color:#586069}.gist .pl-sg{color:#959da5}.gist .pl-corl{text-decoration:underline;color:#032f62}.gist .breadcrumb{font-size:16px;color:var(--color-text-secondary)}.gist .breadcrumb .separator{white-space:pre-wrap}.gist .breadcrumb .separator:after,.gist .breadcrumb .separator:before{content:" "}.gist .breadcrumb strong.final-path{color:var(--color-text-primary)}.gist .editor-abort{display:inline;font-size:14px}.gist .blob-interaction-bar{position:relative;background-color:var(--color-bg-tertiary);border-bottom:1px solid var(--color-border-primary)}.gist .blob-interaction-bar:before{display:table;content:""}.gist .blob-interaction-bar:after{display:table;clear:both;content:""}.gist .blob-interaction-bar .octicon-search{position:absolute;top:6px;left:10px;font-size:12px;color:var(--color-text-secondary)}.gist .blob-filter{width:100%;padding:4px 20px 5px 30px;font-size:12px;border:0;border-radius:0;outline:none}.gist .blob-filter:focus{outline:none}.gist .html-blob{margin-bottom:15px}.gist .TagsearchPopover{width:inherit;max-width:600px}.gist .TagsearchPopover-content{max-height:300px}.gist .TagsearchPopover-list .TagsearchPopover-list-item:hover{background-color:var(--color-bg-tertiary)}.gist .TagsearchPopover-list .TagsearchPopover-list-item .TagsearchPopover-item:hover{text-decoration:none}.gist .TagsearchPopover-list .blob-code-inner{white-space:pre-wrap}.gist .linejump .linejump-input{width:340px;background-color:var(--color-bg-secondary)}.gist .linejump .btn,.gist .linejump .linejump-input{padding:10px 15px;font-size:16px}.gist .CopyBlock{line-height:20px;cursor:pointer}.gist .CopyBlock .octicon-clippy{display:none}.gist .CopyBlock:active,.gist .CopyBlock:focus,.gist .CopyBlock:hover{background-color:var(--color-bg-primary);outline:none}.gist .CopyBlock:active .octicon-clippy,.gist .CopyBlock:focus .octicon-clippy,.gist .CopyBlock:hover .octicon-clippy{display:inline-block}.gist .blob-wrapper{overflow-x:auto;overflow-y:hidden}.gist .blob-wrapper table tr:nth-child(2n){background-color:initial}.gist .page-blob.height-full .blob-wrapper{overflow-y:auto}.gist .page-edit-blob.height-full .CodeMirror{height:300px}.gist .page-edit-blob.height-full .CodeMirror,.gist .page-edit-blob.height-full .CodeMirror-scroll{display:flex;flex-direction:column;flex:1 1 auto}.gist .blob-wrapper-embedded{max-height:240px;overflow-y:auto}.gist .diff-table{width:100%;border-collapse:initial}.gist .diff-table .line-comments{padding:10px;vertical-align:top;border-top:1px solid var(--color-border-primary)}.gist .diff-table .line-comments:first-child+.empty-cell{border-left-width:1px}.gist .diff-table tr:not(:last-child) .line-comments{border-top:1px solid var(--color-border-primary);border-bottom:1px solid var(--color-border-primary)}.gist .blob-num{width:1%;min-width:50px;padding-right:10px;padding-left:10px;font-family:SFMono-Regular,Consolas,Liberation Mono,Menlo,monospace;font-size:12px;line-height:20px;color:var(--color-diff-blob-num-text);text-align:right;white-space:nowrap;vertical-align:top;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.gist .blob-num:hover{color:var(--color-diff-blob-num-hover-text)}.gist .blob-num:before{content:attr(data-line-number)}.gist .blob-num.non-expandable{cursor:default}.gist .blob-num.non-expandable:hover{color:var(--color-diff-blob-num-text)}.gist .blob-code{position:relative;padding-right:10px;padding-left:10px;line-height:20px;vertical-align:top}.gist .blob-code-inner{overflow:visible;font-family:SFMono-Regular,Consolas,Liberation Mono,Menlo,monospace;font-size:12px;color:var(--color-text-primary);word-wrap:normal;white-space:pre}.gist .blob-code-inner .x-first{border-top-left-radius:.2em;border-bottom-left-radius:.2em}.gist .blob-code-inner .x-last{border-top-right-radius:.2em;border-bottom-right-radius:.2em}.gist .blob-code-inner.highlighted,.gist .blob-code-inner .highlighted{background-color:var(--color-blob-line-highlight-bg);box-shadow:inset 2px 0 0 var(--color-blob-line-highlight-border)}.gist .blob-code-inner::selection,.gist .blob-code-inner ::selection{background-color:var(--color-code-selection-bg)}.gist .blob-code-marker:before{padding-right:8px;content:attr(data-code-marker)}.gist .blob-code-marker-addition:before{content:"+ "}.gist .blob-code-marker-deletion:before{content:"- "}.gist .blob-code-marker-context:before{content:"  "}.gist .soft-wrap .diff-table{table-layout:fixed}.gist .soft-wrap .blob-code{padding-left:18px;text-indent:-7px}.gist .soft-wrap .blob-code-inner{word-wrap:break-word;white-space:pre-wrap}.gist .soft-wrap .no-nl-marker{display:none}.gist .soft-wrap .add-line-comment{margin-left:-28px}.gist .blob-code-hunk,.gist .blob-num-expandable,.gist .blob-num-hunk{color:var(--color-diff-blob-hunk-text);vertical-align:middle}.gist .blob-num-expandable,.gist .blob-num-hunk{background-color:var(--color-diff-blob-hunk-num-bg)}.gist .blob-code-hunk{padding-top:4px;padding-bottom:4px;background-color:var(--color-diff-blob-hunk-line-bg);border-width:1px 0}.gist .blob-expanded .blob-code,.gist .blob-expanded .blob-num{background-color:var(--color-bg-secondary)}.gist .blob-expanded+tr:not(.blob-expanded) .blob-code,.gist .blob-expanded+tr:not(.blob-expanded) .blob-num,.gist .blob-expanded .blob-num-hunk,.gist tr:not(.blob-expanded)+.blob-expanded .blob-code,.gist tr:not(.blob-expanded)+.blob-expanded .blob-num{border-top:1px solid var(--color-border-secondary)}.gist .blob-num-expandable{padding:0;font-size:12px;text-align:center}.gist .blob-num-expandable .directional-expander{display:block;width:auto;height:auto;margin-right:-1px;color:var(--color-diff-blob-expander-icon);cursor:pointer}.gist .blob-num-expandable .single-expander{padding-top:4px;padding-bottom:4px}.gist .blob-num-expandable .directional-expander:hover{color:var(--color-diff-blob-expander-hover-icon);text-shadow:none;background-color:var(--color-diff-blob-expander-hover-bg);border-color:var(--color-auto-blue-5)}.gist .blob-code-addition{background-color:var(--color-diff-blob-addition-line-bg);outline:1px dotted transparent}.gist .blob-code-addition .x{color:var(--color-auto-gray-9);background-color:var(--color-diff-blob-addition-word-bg)}.gist .blob-num-addition{color:var(--color-diff-blob-addition-num-text);background-color:var(--color-diff-blob-addition-num-bg);border-color:var(--color-auto-green-2)}.gist .blob-num-addition:hover{color:var(--color-diff-blob-addition-num-hover-text)}.gist .blob-code-deletion{background-color:var(--color-diff-blob-deletion-line-bg);outline:1px dashed transparent}.gist .blob-code-deletion .x{color:var(--color-auto-gray-9);background-color:var(--color-diff-blob-deletion-word-bg)}.gist .blob-num-deletion{color:var(--color-diff-blob-deletion-num-text);background-color:var(--color-diff-blob-deletion-num-bg);border-color:var(--color-auto-red-2)}.gist .blob-num-deletion:hover{color:var(--color-diff-blob-deletion-num-hover-text)}.gist .is-selecting,.gist .is-selecting .blob-num{cursor:ns-resize!important}.gist .is-selecting .add-line-comment,.gist .is-selecting a{pointer-events:none;cursor:ns-resize!important}.gist .is-selecting .is-hovered .add-line-comment{opacity:0}.gist .is-selecting.file-diff-split,.gist .is-selecting.file-diff-split .blob-num{cursor:nwse-resize!important}.gist .is-selecting.file-diff-split .add-line-comment,.gist .is-selecting.file-diff-split .empty-cell,.gist .is-selecting.file-diff-split a{pointer-events:none;cursor:nwse-resize!important}.gist .selected-line{position:relative}.gist .selected-line:after{position:absolute;top:0;left:0;display:block;width:100%;height:100%;box-sizing:border-box;pointer-events:none;content:"";background:var(--color-diff-blob-selected-line-highlight-bg);mix-blend-mode:var(--color-diff-blob-selected-line-highlight-mix-blend-mode)}.gist .selected-line.selected-line-top:after{border-top:1px solid var(--color-diff-blob-selected-line-highlight-border)}.gist .selected-line.selected-line-bottom:after{border-bottom:1px solid var(--color-diff-blob-selected-line-highlight-border)}.gist .selected-line.selected-line-left:after,.gist .selected-line:first-child:after{border-left:1px solid var(--color-diff-blob-selected-line-highlight-border)}.gist .selected-line.selected-line-right:after,.gist .selected-line:last-child:after{border-right:1px solid var(--color-diff-blob-selected-line-highlight-border)}.gist .is-commenting .selected-line.blob-code:before{position:absolute;top:0;left:-1px;display:block;width:4px;height:100%;content:"";background:var(--color-bg-info-inverse)}.gist .add-line-comment{position:relative;z-index:5;float:left;width:22px;height:22px;margin:-2px -10px -2px -20px;line-height:21px;color:var(--color-diff-blob-comment-button-icon);text-align:center;text-indent:0;cursor:pointer;background-color:var(--color-diff-blob-comment-button-bg);background-image:linear-gradient(var(--color-diff-blob-comment-button-gradient-bg),var(--color-diff-blob-comment-button-bg));border-radius:6px;box-shadow:0 1px 4px var(--color-fade-black-15);opacity:0;transition:transform .1s ease-in-out;transform:scale(.8)}.gist .add-line-comment:hover{transform:scale(1)}.gist .add-line-comment:focus,.is-hovered .gist .add-line-comment{opacity:1}.gist .add-line-comment .octicon{vertical-align:text-top;pointer-events:none}.gist .add-line-comment.octicon-check{background:#333;opacity:1}.gist .inline-comment-form{border:1px solid #dfe2e5;border-radius:6px}.gist .timeline-inline-comments{width:100%;table-layout:fixed}.gist .show-inline-notes .inline-comments,.gist .timeline-inline-comments .inline-comments{display:table-row}.gist .inline-comments,.gist .inline-comments.is-collapsed{display:none}.gist .inline-comments .line-comments.is-collapsed{visibility:hidden}.gist .inline-comments .line-comments+.blob-num{border-left-width:1px}.gist .inline-comments .timeline-comment{margin-bottom:10px}.gist .comment-holder,.gist .inline-comments .inline-comment-form,.gist .inline-comments .inline-comment-form-container{max-width:780px}.gist .empty-cell+.line-comments,.gist .line-comments+.line-comments{border-left:1px solid var(--color-border-secondary)}.gist .inline-comment-form-container .inline-comment-form,.gist .inline-comment-form-container.open .inline-comment-form-actions{display:none}.gist .inline-comment-form-container .inline-comment-form-actions,.gist .inline-comment-form-container.open .inline-comment-form{display:block}.gist body.full-width .container,.gist body.full-width .container-lg,.gist body.full-width .container-xl,.gist body.split-diff .container,.gist body.split-diff .container-lg,.gist body.split-diff .container-xl{width:100%;max-width:none;padding-right:20px;padding-left:20px}.gist body.full-width .repository-content,.gist body.split-diff .repository-content{width:100%}.gist body.full-width .new-pr-form,.gist body.split-diff .new-pr-form{max-width:980px}.gist .file-diff-split{table-layout:fixed}.gist .file-diff-split .blob-code+.blob-num{border-left:1px solid var(--color-auto-gray-1)}.gist .file-diff-split .blob-code-inner{word-wrap:break-word;white-space:pre-wrap}.gist .file-diff-split .empty-cell{cursor:default;background-color:var(--color-diff-blob-empty-block-bg);border-right-color:var(--color-border-secondary)}@media (max-width:1280px){.gist .file-diff-split .write-selected .comment-form-head{margin-bottom:48px!important}.gist .file-diff-split markdown-toolbar{position:absolute;right:8px;bottom:-40px}}.gist .submodule-diff-stats .octicon-diff-removed{color:var(--color-text-danger)}.gist .submodule-diff-stats .octicon-diff-renamed{color:#677a85}.gist .submodule-diff-stats .octicon-diff-modified{color:#d0b44c}.gist .submodule-diff-stats .octicon-diff-added{color:var(--color-auto-green-5)}.gist .BlobToolbar{left:-17px}.gist .BlobToolbar-dropdown{margin-left:-2px}.gist .pl-token.active,.gist .pl-token:hover{cursor:pointer;background:#ffea7f}.gist .task-list-item{list-style-type:none}.gist .task-list-item label{font-weight:400}.gist .task-list-item.enabled label{cursor:pointer}.gist .task-list-item+.task-list-item{margin-top:3px}.gist .task-list-item .handle{display:none}.gist .task-list-item-checkbox{margin:0 .2em .25em -1.6em;vertical-align:middle}.gist .convert-to-issue-button{top:2px;right:4px;padding:0 2px;margin-right:8px;background-color:var(--color-bg-tertiary)}.gist .convert-to-issue-button .octicon{fill:var(--color-text-primary)}.gist .convert-to-issue-button:focus .octicon,.gist .convert-to-issue-button:hover .octicon{fill:var(--color-text-link)}.gist .reorderable-task-lists .markdown-body .contains-task-list{padding:0}.gist .reorderable-task-lists .markdown-body li:not(.task-list-item){margin-left:26px}.gist .reorderable-task-lists .markdown-body ol:not(.contains-task-list) li,.gist .reorderable-task-lists .markdown-body ul:not(.contains-task-list) li{margin-left:0}.gist .reorderable-task-lists .markdown-body .task-list-item{padding:2px 15px 2px 42px;margin-right:-15px;margin-left:-15px;line-height:1.5;border:0}.gist .reorderable-task-lists .markdown-body .task-list-item+.task-list-item{margin-top:0}.gist .reorderable-task-lists .markdown-body .task-list-item .handle{display:block;float:left;width:20px;padding:2px 0 0 2px;margin-left:-43px;opacity:0}.gist .reorderable-task-lists .markdown-body .task-list-item .drag-handle{fill:var(--color-icon-primary)}.gist .reorderable-task-lists .markdown-body .task-list-item.hovered>.handle{opacity:1}.gist .reorderable-task-lists .markdown-body .task-list-item.is-dragging{opacity:0}.gist .review-comment-contents .markdown-body .task-list-item{padding-left:42px;margin-right:-12px;margin-left:-12px;border-top-left-radius:6px;border-bottom-left-radius:6px}.gist .convert-to-issue-enabled .task-list-item .contains-task-list{padding:4px 15px 0 43px;margin:0 -15px 0 -42px}.gist .convert-to-issue-enabled .task-list-item.hovered{background-color:var(--color-bg-tertiary)}.gist .convert-to-issue-enabled .task-list-item.hovered .contains-task-list{background-color:var(--color-bg-canvas)}.gist .convert-to-issue-enabled .task-list-item.hovered>.convert-to-issue-button{z-index:20;width:auto;height:auto;overflow:visible;clip:auto}.gist .convert-to-issue-enabled .task-list-item.hovered>.convert-to-issue-button svg{overflow:visible}.gist .convert-to-issue-enabled .task-list-item.is-loading{color:var(--color-text-tertiary);background-color:var(--color-bg-info);border-top:1px solid var(--color-bg-info);border-bottom:1px solid var(--color-bg-canvas);border-left:1px solid var(--color-bg-canvas)}.gist .convert-to-issue-enabled .task-list-item.is-loading ul{color:var(--color-text-primary);background-color:var(--color-bg-canvas)}.gist .convert-to-issue-enabled .task-list-item.is-loading>.handle{opacity:0}.gist .highlight{padding:0;margin:0;font-family:SFMono-Regular,Consolas,Liberation Mono,Menlo,monospace;font-size:12px;font-weight:400;line-height:1.4;color:#333;background:var(--color-bg-primary);border:0}.gist .octospinner,.gist .render-viewer-error,.gist .render-viewer-fatal,.gist .render-viewer-invalid{display:none}.gist iframe.render-viewer{width:100%;height:480px;overflow:hidden;border:0}.gist code,.gist pre{font-family:SFMono-Regular,Consolas,Liberation Mono,Menlo,monospace!important;white-space:pre}.gist .gist-meta{padding:10px;overflow:hidden;font:12px -apple-system,BlinkMacSystemFont,Segoe UI,Helvetica,Arial,sans-serif,Apple Color Emoji,Segoe UI Emoji;color:var(--color-text-secondary);background-color:#f7f7f7;border-radius:0 0 6px 6px}.gist .gist-meta a{font-weight:600;color:#666;text-decoration:none;border:0}.gist .gist-data{overflow:auto;word-wrap:normal;background-color:var(--color-bg-primary);border-bottom:1px solid #ddd;border-radius:6px 6px 0 0}.gist .gist-file{margin-bottom:1em;font-family:SFMono-Regular,Consolas,Liberation Mono,Menlo,monospace;border:1px solid;border-color:#ddd #ddd #ccc;border-radius:6px}.gist .gist-file article{padding:6px}.gist .gist-file .scroll .gist-data{position:absolute;top:0;right:0;bottom:30px;left:0;overflow:scroll}.gist .gist-file .scroll .gist-meta{position:absolute;right:0;bottom:0;left:0}.gist .blob-num{min-width:inherit}.gist .blob-code,.gist .blob-num{padding:1px 10px!important;background:transparent}.gist .blob-code{text-align:left;border:0}.gist .blob-code-inner::selection,.gist .blob-code-inner ::selection{background-color:#c8e1ff}.gist .blob-wrapper table{border-collapse:collapse}.gist .blob-wrapper tr:first-child td{padding-top:4px}.gist .markdown-body .anchor{display:none}/*# sourceMappingURL=gist-embed-f4c45613d7bb45a227df41eeff4fc759.css.map */]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[译] JAVA16带给开发者的新特性</title>
      <link href="2021/03/29/%E8%AF%91-JAVA16%E5%B8%A6%E7%BB%99%E5%BC%80%E5%8F%91%E4%BA%BA%E5%91%98%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7/"/>
      <url>2021/03/29/%E8%AF%91-JAVA16%E5%B8%A6%E7%BB%99%E5%BC%80%E5%8F%91%E4%BA%BA%E5%91%98%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址：<a href="https://levelup.gitconnected.com/features-java-16-brings-to-developers-b0edd1a1ed28" target="_blank" rel="noopener">Features Java 16 Brings to Developers</a><br>原文作者：<a href="https://zivce.medium.com/" target="_blank" rel="noopener">Živković Miloš</a><br>译者：<a href="https://maybelence.cn/">maybelence</a></p></blockquote><p>Java不需要再做过多介绍。它作为一种编程语言，已经有很多年的发展历史。最近的更新也为该语言带来了几个新的特性：</p><ul><li>密封类</li><li>模式匹配</li><li>其他安全措施。</li></ul><h3 id="密封类"><a href="#密封类" class="headerlink" title="密封类"></a>密封类</h3><p><a href="https://openjdk.java.net/jeps/397" target="_blank" rel="noopener">JEP-397</a></p><p><code>密封</code>的目的是限制具体的类。密封将实现控制模式匹配，并提供对模式匹配的支持。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里可以许可的关键字已经密封 </span></span><br><span class="line"><span class="comment">// 允许列出可以扩展密封等级的等级</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> sealed <span class="class"><span class="keyword">class</span> <span class="title">Shape</span></span></span><br><span class="line"><span class="class">    <span class="title">permits</span> <span class="title">Circle</span>, <span class="title">Rectangle</span>, <span class="title">Square</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure><p>如果使用基本的接口，那你将不会得到反射，您不会对这些有限的具体实现有细致了解。</p><p>当使用密封类的话，你将获取到这个反射行为，您知道自己域中可以拥有的类型。</p><p>枚举表明了一组有限的值。密封类表明了一组数量有限的一种值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sealed <span class="class"><span class="keyword">interface</span> <span class="title">Celestial</span> </span></span><br><span class="line"><span class="class">    <span class="title">permits</span> <span class="title">Planet</span>, <span class="title">Star</span>, <span class="title">Comet</span> </span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Planet</span> <span class="keyword">implements</span> <span class="title">Celestial</span> </span>&#123; ... &#125;</span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Star</span>   <span class="keyword">implements</span> <span class="title">Celestial</span> </span>&#123; ... &#125;</span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Comet</span>  <span class="keyword">implements</span> <span class="title">Celestial</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure><blockquote><p>但是，这种层次结构并不会反映出重要的领域知识，即我们的模型中只有三种。<br>在这些情况下，限制子类或者子接口的集合可以简化建模。 — JEP-397</p></blockquote><h3 id="对基于值的类的值发出警告"><a href="#对基于值的类的值发出警告" class="headerlink" title="对基于值的类的值发出警告"></a>对基于值的类的值发出警告</h3><p><a href="https://openjdk.java.net/jeps/390" target="_blank" rel="noopener">JEP-390</a></p><p>基本类型的包装类是基于值的类，例如：<code>Byte</code>, <code>Short</code>, <code>Integer</code>, <code>Long</code>, <code>Float</code>, <code>Double</code>, <code>Boolean</code>,和 <code>Character</code>。有关基于值的类的更多信息，请参见<a href="https://docs.oracle.com/en/java/javase/15/docs/api/java.base/java/lang/doc-files/ValueBased.html" target="_blank" rel="noopener">此处</a>。</p><p>由于它们是不可变的对象，因此构造函数对于它们来言是没有任何意义的。</p><p>为了防止滥用构造函数，提供<code>@jdk.internal.ValueBased</code>来用于标注作为value-based的类。每次编译器找到基于值的类构造函数时，这都会发出警告。</p><h3 id="默认强封装JDK内部元素"><a href="#默认强封装JDK内部元素" class="headerlink" title="默认强封装JDK内部元素"></a>默认强封装JDK内部元素</h3><p><a href="https://openjdk.java.net/jeps/396" target="_blank" rel="noopener">JEP-396</a></p><p>这是为了鼓励用户使用标准的Java API。不过，如果您如果需要使用宽松的封装。请尽量避免使用该特性。</p><p>您需要将参数添加到JVM的启动器中。在下面您可以看到可能的参数，您可以传入。有关参数的更多信息，请参见<a href="https://openjdk.java.net/jeps/396#Description" target="_blank" rel="noopener">此处</a>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--illegal-access&#x3D; permit | deny | debug | warn</span><br></pre></td></tr></table></figure><p>尽管JAVA16包含了此功能，但是您可能在更早的<a href="https://stackoverflow.com/questions/53790182/get-the-current-value-of-illegal-access-setting-in-java" target="_blank" rel="noopener">版本</a>就遇到了这种问题，这个更改是在JAVA9<a href="https://jaxenter.com/jdk-9-replace-permit-illegal-access-134180.html" target="_blank" rel="noopener">发布</a>之后提出的。</p><blockquote><p>直至今日，某些构建工具在构建Java项目(Java&gt; = 9)时仍会打印出<a href="https://issues.apache.org/jira/browse/GROOVY-8339" target="_blank" rel="noopener">“反射访问”警告</a>，即使已经成功构建，它们也会感觉“尚未就绪”。 - <a href="https://www.marcobehler.com/guides/a-guide-to-java-versions-and-features" target="_blank" rel="noopener">出处</a></p></blockquote><h3 id="模式匹配"><a href="#模式匹配" class="headerlink" title="模式匹配"></a>模式匹配</h3><p><a href="https://openjdk.java.net/jeps/394" target="_blank" rel="noopener">JEP-394</a></p><p>模式匹配已经存在很长时间了，你可以在很多编程语言中发现它，例如Elixir。</p><p>在JAVA中，存在许多<code>instanceof</code>条件。因为有减少操作的动机从而衍生出了模式匹配。</p><blockquote><p>模式匹配允许简明地表达对象的所需“形状”（模式），并允许各种语句和表达式针对其输入（匹配）来测试“形状”。 — JEP-394</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 很多样板代码</span></span><br><span class="line"><span class="keyword">if</span> (obj <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">    String s = (String) obj;    <span class="comment">// grr...</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用模式匹配，我们可以获得此代码。减少样板，进行转换，并声明变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (obj <span class="keyword">instanceof</span> String s) &#123;</span><br><span class="line">    <span class="comment">// Let pattern matching do the work!</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>模式变量在它匹配的范围内。因此，这样的代码是有效的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (a <span class="keyword">instanceof</span> Point p) &#123;</span><br><span class="line">    <span class="comment">// p在范围内</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// p不再范围内</span></span><br><span class="line"><span class="keyword">if</span> (b <span class="keyword">instanceof</span> Point p) &#123;     <span class="comment">// Sure!</span></span><br><span class="line">        ... </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>您不必担心变量名。如果范围不同，则可以重用现有名称。</p><p><em>模式匹配改善了什么？？？</em></p><p>可以避免很多显示的转换，让我们用相同的方法，写出可读性更高的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> (o <span class="keyword">instanceof</span> CaseInsensitiveString) &amp;&amp;</span><br><span class="line">        ((CaseInsensitiveString) o).s.equalsIgnoreCase(s);</span><br><span class="line"><span class="comment">// to this </span></span><br><span class="line"><span class="keyword">return</span> (o <span class="keyword">instanceof</span> CaseInsensitiveString cis) &amp;&amp;</span><br><span class="line">        cis.s.equalsIgnoreCase(s);</span><br></pre></td></tr></table></figure><p>现在看下一个例子，如果instanceof String s的条件为true，则为s分配一个值。相反，如果模式匹配失败，那么s将没有任何值。</p><p>因此这个代码完全可以正常执行，不存在<a href="https://docs.oracle.com/javase/specs/jls/se15/html/jls-14.html#jls-14.22" target="_blank" rel="noopener">语句不可达</a>的情况。如果有条件通过，则s分配值；如果没有通过，则s被安全丢弃。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onlyForStrings</span><span class="params">(Object o)</span> <span class="keyword">throws</span> MyException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> String s))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> MyException();</span><br><span class="line">    <span class="comment">// s has value at this point</span></span><br><span class="line">    System.out.println(s);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Java在不断发展。导致很多重大更改。同时也引入很多<a href="https://medium.com/dev-genius/8-problems-every-java-developer-knows-4f65339e0c00" target="_blank" rel="noopener">问题</a>。</p><p><img src="0_MzIcNjgSR9uVS3yb.png" alt="Constant Java updates"></p><p>即使这样，我们仍然需要进行调整。使用新特性，以便我们创建更好的软件。这些是我提出的几个新特性。您可以在下面的部分中阅读更多内容。</p><hr><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p>JEP草案：开关的模式匹配（preview）<a href="https://openjdk.java.net/jeps/406" target="_blank" rel="noopener">点此查看</a></p><p>JDK16：JAVA16中的新特性 <a href="https://www.infoworld.com/article/3569150/jdk-16-the-new-features-in-java-16.html" target="_blank" rel="noopener">点此查看</a></p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA16 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>切面编程--springAOP</title>
      <link href="2021/03/24/%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B-springAOP/"/>
      <url>2021/03/24/%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B-springAOP/</url>
      
        <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>AOP意为<code>面向切面编程</code>，是通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术，是OOP面向对象编程的一种补足。它是软件开发中的一个热点技术，Spring AOP 也是Spring框架的核心特性之一（另一个核心特性是IOC）</p><h4 id="为什么要引入AOP"><a href="#为什么要引入AOP" class="headerlink" title="为什么要引入AOP"></a>为什么要引入AOP</h4><ul><li>分离功能性需求和非功能性需求</li><li>集中处理某一关注点</li><li>侵入性少，增强代码可读性及可维护性</li></ul><h4 id="AOP应用场景"><a href="#AOP应用场景" class="headerlink" title="AOP应用场景"></a>AOP应用场景</h4><p>权限控制、缓存控制、事务控制、分布式追踪、异常处理等</p><p>举个例子，比如一个后台管理系统，每次修改元素信息的时候，都需要校验操作人是否拥有该操作权限，在传统的OOP中，我们需要写一个<code>基类</code>，声明鉴权方法，在子类中调用super.checkPriv();来返回结果。如果Service很多，每个Service都需要继承BaseService,就会导致耦合度过高，代码冗余。<br>而AOP可以直接通过一个单一的切面类，对需要权限验证的方法统一织入。就好像一个包租婆，她其实关心的只是跟用户签合同和收房租，如果每来一个用户，她都要带着看房、谈价格。对她而言显然是不乐意的。所以中介就出现了，这种重复且非核心的事情，直接交给中介。她就可以专注于签合同和收租。</p><p><img src="1.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Landlady1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 仅仅只是实现了核心的业务功能</span></span><br><span class="line">        System.out.println(<span class="string">"签合同"</span>);</span><br><span class="line">        System.out.println(<span class="string">"收租"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Landlady2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 仅仅只是实现了核心的业务功能</span></span><br><span class="line">        System.out.println(<span class="string">"签合同"</span>);</span><br><span class="line">        System.out.println(<span class="string">"收租"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Intermediary</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(* com.example.*.service())"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logPointCut</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"logPointCut()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//重复且非核心的事情</span></span><br><span class="line">        System.out.println(<span class="string">"带租客看房"</span>);</span><br><span class="line">        System.out.println(<span class="string">"谈价格"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注册过程"><a href="#注册过程" class="headerlink" title="注册过程"></a>注册过程</h3><h4 id="AopAutoConfiguration"><a href="#AopAutoConfiguration" class="headerlink" title="AopAutoConfiguration"></a>AopAutoConfiguration</h4><p>AopAutoConfiguration 这个配置类主要是配置aop的代理类型，默认spring.aop.auto=true。看注释的意思，<code>spring.aop.auto=true</code>为true的时候，通过为配置类添加<code>@EnableAspectJAutoProxy</code>，spring默认就会开启AOP功能。springboot2.0之后AOP代理有三种策略：</p><ul><li>jdk动态代理：当spring.aop.proxy-target-class=false, 引入了aspectjweaver依赖时生效</li><li>cglib代理：当spring.aop.proxy-target-class=true, 引入了aspectjweaver依赖时生效</li><li>基础代理：当spring.aop.proxy-target-class=true, 若没有aspectjweaver依赖时生效，只作用于框架内部的advisors<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> org.springframework.boot.autoconfigure.EnableAutoConfiguration</span></span><br><span class="line"><span class="comment"> * Auto-configuration&#125; for Spring's AOP support. Equivalent to enabling</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> EnableAspectJAutoProxy <span class="doctag">@EnableAspectJAutoProxy</span>&#125; in your configuration.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * The configuration will not be activated if &#123;<span class="doctag">@literal</span> spring.aop.auto=false&#125;. The</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@literal</span> proxyTargetClass&#125; attribute will be &#123;<span class="doctag">@literal</span> true&#125;, by default, but can be</span></span><br><span class="line"><span class="comment"> * overridden by specifying &#123;<span class="doctag">@literal</span> spring.aop.proxy-target-class=false&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Dave Syer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Josh Long</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> EnableAspectJAutoProxy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"spring.aop"</span>, name = <span class="string">"auto"</span>, havingValue = <span class="string">"true"</span>, matchIfMissing = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AopAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//因为该注解的这个默认值是true，这些都不能省略，我好痛苦</span></span><br><span class="line">    <span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>) </span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(Advice<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">static</span> <span class="title">class</span> <span class="title">AspectJAutoProxyingConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span>(proxyTargetClass = <span class="keyword">false</span>)</span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"spring.aop"</span>, name = <span class="string">"proxy-target-class"</span>, havingValue = <span class="string">"false"</span>,</span><br><span class="line">matchIfMissing = <span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">JdkDynamicAutoProxyConfiguration</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span>(proxyTargetClass = <span class="keyword">true</span>)</span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"spring.aop"</span>, name = <span class="string">"proxy-target-class"</span>, havingValue = <span class="string">"true"</span>,</span><br><span class="line">matchIfMissing = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CglibAutoProxyConfiguration</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="meta">@ConditionalOnMissingClass</span>(<span class="string">"org.aspectj.weaver.Advice"</span>)</span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"spring.aop"</span>, name = <span class="string">"proxy-target-class"</span>, havingValue = <span class="string">"true"</span>,</span><br><span class="line">matchIfMissing = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassProxyingConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">ClassProxyingConfiguration(BeanFactory beanFactory) &#123;</span><br><span class="line"><span class="keyword">if</span> (beanFactory <span class="keyword">instanceof</span> BeanDefinitionRegistry) &#123;</span><br><span class="line">BeanDefinitionRegistry registry = (BeanDefinitionRegistry) beanFactory;</span><br><span class="line">AopConfigUtils.registerAutoProxyCreatorIfNecessary(registry);</span><br><span class="line">AopConfigUtils.forceAutoProxyCreatorToUseClassProxying(registry);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="EnableAspectJAutoProxy"><a href="#EnableAspectJAutoProxy" class="headerlink" title="@EnableAspectJAutoProxy"></a>@EnableAspectJAutoProxy</h4><p>从代码可以看出 @EnableAspectJAutoProxy 引入了 AspectJAutoProxyRegister.class 对象 ，AspectJAutoProxyRegister 给容器中注册一个 AnnotationAwareAspectJAutoProxyCreator：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import</span>(AspectJAutoProxyRegistrar<span class="class">.<span class="keyword">class</span>) //引入<span class="title">AspectJAutoProxyRegister</span>.<span class="title">class</span>对象</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">EnableAspectJAutoProxy</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//默认使用java接口创建代理，当值为true的时候采用CGlib基于类代理</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">proxyTargetClass</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//是否通过aop框架暴露该代理对象，AopContext能够访问.</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">exposeProxy</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="AspectJAutoProxyRegistrar"><a href="#AspectJAutoProxyRegistrar" class="headerlink" title="AspectJAutoProxyRegistrar"></a>AspectJAutoProxyRegistrar</h4><p>这个类的作用注释写的也很明白， 基于<code>@EnableAspectJAutoProxy</code>注解的情况下，对当前的<code>BeanDefinitionRegistry</code>注册一个<code>AnnotationAwareAspectJAutoProxyCreator</code>。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Registers an org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator</span></span><br><span class="line"><span class="comment"> * AnnotationAwareAspectJAutoProxyCreator against the current BeanDefinitionRegistry</span></span><br><span class="line"><span class="comment"> * as appropriate based on a given <span class="doctag">@EnableAspectJAutoProxy</span> annotation.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AspectJAutoProxyRegistrar</span> <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span> </span>&#123;</span><br><span class="line">    AopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(registry);</span><br><span class="line">    <span class="comment">//下面的代码是判断是否采用CGlib和通过AOP暴露该代理对象的代码</span></span><br><span class="line">    <span class="comment">//全省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>直接接着看<code>AopConfigUtils</code>, registerAspectJAnnotationAutoProxyCreatorIfNecessary 这个方法，这个方法最后调用到了<code>registerOrEscalateApcAsRequired</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> BeanDefinition <span class="title">registerOrEscalateApcAsRequired</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        Class&lt;?&gt; cls, BeanDefinitionRegistry registry, @Nullable Object source)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Assert.notNull(registry, <span class="string">"BeanDefinitionRegistry must not be null"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (registry.containsBeanDefinition(AUTO_PROXY_CREATOR_BEAN_NAME)) &#123; <span class="comment">//如果registry已经包含目标bean</span></span><br><span class="line">        BeanDefinition apcDefinition = registry.getBeanDefinition(AUTO_PROXY_CREATOR_BEAN_NAME);</span><br><span class="line">        <span class="keyword">if</span> (!cls.getName().equals(apcDefinition.getBeanClassName())) &#123;</span><br><span class="line">            <span class="keyword">int</span> currentPriority = findPriorityForClass(apcDefinition.getBeanClassName());</span><br><span class="line">            <span class="keyword">int</span> requiredPriority = findPriorityForClass(cls);</span><br><span class="line">            <span class="keyword">if</span> (currentPriority &lt; requiredPriority) &#123;</span><br><span class="line">                apcDefinition.setBeanClassName(cls.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    RootBeanDefinition beanDefinition = <span class="keyword">new</span> RootBeanDefinition(cls);</span><br><span class="line">    beanDefinition.setSource(source);</span><br><span class="line">    beanDefinition.getPropertyValues().add(<span class="string">"order"</span>, Ordered.HIGHEST_PRECEDENCE);</span><br><span class="line">    beanDefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);</span><br><span class="line">    <span class="comment">//否则将beanDefinition注册进registry中,注册名为 AUTO_PROXY_CREATOR_BEAN_NAME</span></span><br><span class="line">    registry.registerBeanDefinition(AUTO_PROXY_CREATOR_BEAN_NAME, beanDefinition);</span><br><span class="line">    <span class="keyword">return</span> beanDefinition;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AnnotationAwareAspectJAutoProxyCreator对目标对象进行代理对象的创建，创建代理对象过程中，会先创建一个代理工厂，获取到所有的增强器（通知方法），将这些增强器和目标类注入代理工厂，再用代理工厂创建对象；<br>代理对象执行目标方法，得到目标方法的拦截器链，利用拦截器的链式机制，依次进入每一个拦截器进行执行。</p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> 切面编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode每日一题--StrStr()</title>
      <link href="2021/03/23/LeetCode%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-StrStr/"/>
      <url>2021/03/23/LeetCode%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-StrStr/</url>
      
        <content type="html"><![CDATA[<p>昨天和朋友劳(da)逸(you)结(xi)合的时候，朋友告诉我他实现了一个Strstr()。然后我去看了一下，题目难度属于Easy。想着做出来还是简单的，于是立马动手操作了一把。</p><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>实现 strStr() 函数。</p><p>给定一个 haystack 字符串和一个 needle 字符串，在 haystack 字符串中找出 needle 字符串出现的第一个位置 (从0开始)。如果不存在，则返回  -1。</p><p>示例 1:</p><blockquote><p>输入: haystack = “hello”, needle = “ll”<br>输出: 2<br>示例 2:</p><p>输入: haystack = “aaaaa”, needle = “bba”<br>输出: -1</p></blockquote><blockquote id="fn_链接：https://leetcode-cn.com/problems/implement-strstr"><sup>链接：https://leetcode-cn.com/problems/implement-strstr</sup>. 来源：力扣（LeetCode）<a href="#reffn_链接：https://leetcode-cn.com/problems/implement-strstr" title="Jump back to footnote [链接：https://leetcode-cn.com/problems/implement-strstr] in the text."> &#8617;</a></blockquote><p>因为我是一个java党，我拿到这个题目一看，这不就是indexOf吗，于是我优雅的写下了第一行代码。。。。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">strStr</span><span class="params">(String haystack, String needle)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> haystack.indexOf(needle);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="临界情况"><a href="#临界情况" class="headerlink" title="临界情况"></a>临界情况</h4><p>但是题目的本意显然不是让我们之间调用API，strStr()是C++的API，题目的本意是让我们实现他，短暂思索一下。我就开始了我接下来的思路。<br>既然要返回初始下标，那我直接将字符串转为char[]，通过判断数组下标，返回起始位置,当needle是空串的时候按照API的返回结果默认应该返回0，因此加了一层特殊的条件判断。然后开始思考indexOf如何实现。。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">strStr</span><span class="params">(String haystack, String needle)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (needle.length() == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span>[] sources = haystack.toCharArray();</span><br><span class="line">    <span class="keyword">char</span>[] targets = needle.toCharArray();</span><br><span class="line">    <span class="keyword">return</span> indexOf(sources, targets, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们先来思考临界条件。当targets的长度大于sources长度的时候。那肯定是匹配不上的。因此直接返回-1。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(<span class="keyword">char</span>[] sources, <span class="keyword">char</span>[] targets, <span class="keyword">int</span> fromIndex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (targets.length &gt; sources.length)</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="处理思路"><a href="#处理思路" class="headerlink" title="处理思路"></a>处理思路</h4><p>当满足targets的长度小于等于sources的长度的时候，我需要去寻找targets中第一个元素作为sources第一次出现的位置。如果从头至尾我都找不到这个元素，那么说明匹配不是，直接返回-1，如果我能找到这个元素的下标，则看后面能否完全匹配，若能这个第一次出现的位置就是返回下标。如果后面不完全匹配，那么我可以截取sources中这个<code>下标</code>到<code>sources.length</code>生成一个新的数组，我定义为newsources，重复这个匹配逻辑，如果匹配上，那么返回坐标就是sources中第一次出现的位置加上newsources中第一次出现的位置，如果没匹配上，就重复分割数组，直至<code>匹配成功</code>或者出现上面<code>临界情况</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">strStr</span><span class="params">(String haystack, String needle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (needle.length() == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">char</span>[] sources = haystack.toCharArray();</span><br><span class="line">        <span class="keyword">char</span>[] targets = needle.toCharArray();</span><br><span class="line">        <span class="keyword">return</span> indexOf(sources, targets, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(<span class="keyword">char</span>[] sources, <span class="keyword">char</span>[] targets, <span class="keyword">int</span> fromIndex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (targets.length &gt; sources.length)</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//先找到第一个位置</span></span><br><span class="line">        <span class="keyword">char</span> Item = targets[<span class="number">0</span>];</span><br><span class="line">        BREAK:</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sources.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sources[i] == Item) &#123;</span><br><span class="line">                fromIndex = i; <span class="comment">//预设定</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; targets.length; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i != <span class="number">0</span> &amp;&amp; i == sources.length - <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="comment">//这里其实可以优化，当找到第一个位置之后，</span></span><br><span class="line">                    <span class="comment">//直接判断sources剩余长度是不是大于等于targets长度可省略很多次if判断</span></span><br><span class="line">                        <span class="keyword">return</span> -<span class="number">1</span>; </span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (sources[i++] != targets[j]) &#123;</span><br><span class="line">                        fromIndex++;</span><br><span class="line">                        <span class="keyword">break</span> BREAK;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> fromIndex;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//全部遍历都找不到第一个元素，返回-1</span></span><br><span class="line">            <span class="keyword">if</span> (i + <span class="number">1</span> == sources.length)</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//递归</span></span><br><span class="line">        <span class="keyword">int</span> thenIndex = indexOf(Arrays.copyOfRange(sources, fromIndex, sources.length), targets, fromIndex);</span><br><span class="line">        <span class="keyword">return</span> thenIndex == -<span class="number">1</span> ? -<span class="number">1</span> : fromIndex + thenIndex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面在遍历匹配的时候，我加了一层判断，因为可能sources剩余长度如果小于targets长度，i++之后 sources[i++]有可能会数组越界。这种处理其实不好，可以直接在遍历targets之前判断sources.length-fromIndex是不是比targets.length大。这样可以省略很多次if判断，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(sources.length-fromIndex&lt;targets.length)&#123;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; targets.length; j++) &#123;</span><br><span class="line">    <span class="comment">// if (i != 0 &amp;&amp; i == sources.length - 1) &#123;</span></span><br><span class="line">    <span class="comment">// //这里其实可以优化，当找到第一个位置之后，</span></span><br><span class="line">    <span class="comment">// //直接判断sources剩余长度是不是大于等于targets长度可省略很多次if判断</span></span><br><span class="line">    <span class="comment">//     return -1; </span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">if</span> (sources[i++] != targets[j]) &#123;</span><br><span class="line">        fromIndex++;</span><br><span class="line">        <span class="keyword">break</span> BREAK;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>其实类似字符串的匹配算法还有很多，比较有名的KMP算法，或者利用哈希表来处理，都是一些解决方案，仅此记录一下我的解法，勿喷勿喷。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>百问不厌的乐观锁和悲观锁</title>
      <link href="2021/01/28/%E7%99%BE%E9%97%AE%E4%B8%8D%E5%8E%8C%E7%9A%84%E4%B9%90%E8%A7%82%E9%94%81%E5%92%8C%E6%82%B2%E8%A7%82%E9%94%81/"/>
      <url>2021/01/28/%E7%99%BE%E9%97%AE%E4%B8%8D%E5%8E%8C%E7%9A%84%E4%B9%90%E8%A7%82%E9%94%81%E5%92%8C%E6%82%B2%E8%A7%82%E9%94%81/</url>
      
        <content type="html"><![CDATA[<p>乐观锁和悲观锁一直都是面试中高频考察点，面试官也喜欢从这类问题去考察面试者的基本功。今天我们就来聊一下乐观锁和悲观锁的实现：<br><code>CAS，Synchronized，ReentrantLock</code>。</p><p>首先要对乐观锁和悲观锁，我们要有一定的概念：</p><ul><li>悲观锁：悲观的认为只要不做正确的数据同步措施，它就一定会出问题</li><li>乐观锁：乐观的认为不需要去采取同步措施也不会出问题，如果出现问题，再去补救</li></ul><p>那具体通过哪些方式去才取同步呢，在多线程中，同步机制主要分为以下四种，具体的区别以后再讲：</p><ul><li>互斥量：为协调共同对一个共享资源的单独访问而设计的。</li><li>临界区：通过对多线程的串行化来访问公共资源或一段代码，速度快，适合控制数据访问。</li><li>临界量：为控制一个具有有限数量用户资源而设计。</li><li>事件：用来通知线程有一些事件已发生，从而启动后继任务的开始。</li></ul><h3 id="互斥（同步阻塞）悲观锁"><a href="#互斥（同步阻塞）悲观锁" class="headerlink" title="互斥（同步阻塞）悲观锁"></a>互斥（同步阻塞）悲观锁</h3><p>互斥只是同步机制的其中一个手段，也是很常见的保障并发正确性的手段<br>我们知道传统的锁（如<code>synchronized</code>或者<code>ReentrantLock</code>）之所以被称为重量级锁，就是因为他使用操作系统互斥量来实现同步。</p><h4 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h4><p>synchronized能实现同步的基础：也是因为在java中，所有对象都可以作为锁。</p><p>具体表现为以下3种形式。</p><ul><li>对于普通同步方法，锁是当前实例对象。</li><li>对于静态同步方法，锁是当前类的Class对象。</li><li>对于同步方法块，锁是Synchonized括号里配置的对象。</li><li>当一个线程试图访问同步代码块时，它首先必须得到锁，退出或抛出异常时必须释放锁。</li></ul><p>synchronized是基于<code>Monitor</code>来实现同步的。当<code>synchronized</code>经过编译之后，<strong>会在<code>同步块</code>的前后分别形成<code>monitorenter</code>和<code>monitorexit</code>指令</strong>。</p><ul><li>每个monitor维护着一个记录着拥有次数的计数器。未被拥有的monitor的该计数器为0</li><li>当执行进入monitorenter时，锁计数器就会+1，当执行到monitorexit,锁计数器就会-1。当锁计数器为0的时候，锁就会被释放</li><li>synchronized不会出现自己死锁自己的情况，因为对于已经进入同步块的线程，synchronized锁是可重入的</li><li>在synchronized同步代码块执行完，会阻塞其他线程进入同步锁（排他锁）</li><li>对于<code>同步方法</code>，<code>synchronized</code>同步方式是通过方法中的access_flags中设置<code>ACC_SYNCHRONIZED</code>标志来实现</li></ul><p>并且，随着JDK6对<code>synchronized</code>进行了各种优化之后，有些情况下synchronized就并不那么重,JDK6中为了减少获得锁和释放锁带来的性能消耗而引入的偏向锁和轻量级锁。<br>针对<code>synchronized</code>获取锁的方式，JVM 使用了锁升级的优化方式，就是先使用偏向锁优先同一线程然后再次获取锁，如果失败，就升级为 CAS 轻量级锁，如果失败就会短暂自旋，防止线程被系统挂起。最后如果以上都失败就升级为重量级锁。并且锁只能向上升级，不能降级。</p><p><img src="11.png" alt=""></p><h4 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h4><p>实现ReentrantLock的基础是AQS( AbstractQueuedSynchronizer 队列同步器)，AQS 有一个 state 标记位，值为<code>1</code>时表示有线程占用，其他线程需要进入到同步队列等待，同步队列是一个双向链表。<br>当获得锁需要等待某个条件时，会进入condition队列，进入等待队列的可以有很多个。当满足condition的条件的时候，线程就会重新竞争锁资源。<br>ReentrantLock 内部有公平锁和非公平锁两种实现，差别就在于新来的线程是否比已经在同步队列中的等待线程更早获得锁。</p><p><img src="12.png" alt=""></p><p>ReentrantLock里面有一个内部类Sync，Sync继承AQS（AbstractQueuedSynchronizer），添加锁和释放锁的大部分操作实际上都是在Sync中实现的。<br>它有公平锁FairSync和非公平锁NonfairSync两个子类。<br>ReentrantLock默认使用非公平锁，也可以通过构造器来显示的指定使用公平锁。</p><h3 id="非阻塞同步（乐观锁）"><a href="#非阻塞同步（乐观锁）" class="headerlink" title="非阻塞同步（乐观锁）"></a>非阻塞同步（乐观锁）</h3><h4 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h4><p>CAS(Compare And Swap)是一种乐观锁的实现方式。是一种轻量级锁，JUC 中很多工具类的实现都是基于<code>CAS</code>的。CAS操作包含三个操作数—— 内存位置的值（V）、预期原值（A）和新值（B）。如果内存位置的值与预期原值相匹配，那么处理器会自动将该位置更新为新值。否则，处理器不做任何操作。无论哪种情况，它都会在CAS指令之前返回该位置的值。</p><p><img src="13.png" alt=""></p><p>但是这种情况，当数据被其他线程修改，就会出现一直循环。导致CPU资源一直消耗过多。除此之外<code>CAS</code>本身还存在<code>ABA问题</code>。即线程一读取数据A，线程二也读取数据A，线程二通过CAS比较发现数据是A，于是将A写回B，线程三读取B，线程三通过CAS比较发现数据是B没有被操作过，又将数据写回A，此时线程一读到的是A，会以为数据没有改变过。对于ABA问题，通过控制变量值的<code>版本号</code>（自增字段或者时间戳）来保证CAS的正确性。具体解决思路就是在变量前追加上版本号，每次变量更新的时候把版本号加一，那么A - B - A就会变成1A - 2B - 3A。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>今日偷懒，不写总结。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 锁 </tag>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单聊一下volatile</title>
      <link href="2021/01/06/%E7%AE%80%E5%8D%95%E8%81%8A%E4%B8%80%E4%B8%8Bvolatile/"/>
      <url>2021/01/06/%E7%AE%80%E5%8D%95%E8%81%8A%E4%B8%80%E4%B8%8Bvolatile/</url>
      
        <content type="html"><![CDATA[<p>开始讲这个题目之前，先来聊一下什么是线程安全。多个线程访问同一个对象时，如果不用考虑这些线程在运行时环境下的调度和交替执行，也不需要进行额外的同步，或者在调用方进行任何其他操作，调用这个对象的行为都可以获得正确的结果，那么这个对象就是<code>线程安全</code>的。</p><p>这是一个很常见的面试题，再接着往下深入一点，如何保证线程安全呢？线程安全一般是从三个方面考虑：</p><ul><li>原子性: <code>synchronized</code>确保同一时间只有一个线程能拿到锁,进入当前代码块</li><li>可见性：<code>volatile</code>保证不同线程对共享变量操作的可见性,<code>synchronized</code>获得锁后会清空工作内存，从主存拷贝最新的变量到工作内存(副本)，再将修改后的副本重新刷到主存中，然后释放锁，其他没有获得锁的线程都处于阻塞状态，因此也能保证数据可见性。</li><li>有序性：<code>volatile</code>本身就具有指令重排序，<code>synchronized</code>和<code>Lock</code>保证每个时刻是有一个线程执行同步代码，自然就保证了有序性。</li></ul><p>说完这些我们开始看一个控制台小程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> maybelence</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@descrpition</span> a demo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021-01-05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Consumer&lt;String&gt; fun = System.out::println;</span><br><span class="line">        Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        test.start();</span><br><span class="line">        <span class="keyword">while</span> (!test.isFlag())&#123; &#125;</span><br><span class="line">        fun.accept(<span class="string">"你真厉害"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFlag</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.flag = <span class="keyword">true</span>;</span><br><span class="line">        System.out.println(<span class="string">"flag is "</span>+ flag);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台打印的是<code>flag is true</code>，现在应该不足为奇了。那如何让计算机对你说“你真厉害”呢。这时候应该可以胸有成竹的选择volatile或者synchronized。<br>先来看一下synchronized实现。<br>我这里大致写了一下,这里只有第一种会打印“你真厉害”，但是第二种并不会打印。第一种每循环一次都会获取一次锁，当执行完成之后，会将flag值从工作内存刷新到主存中。但是第二种，他在获取锁的时候，flag仍然是false的，然后就进入了无限死循环。并不会将flag值更新到主存中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Consumer&lt;String&gt; fun = System.out::println;</span><br><span class="line">        Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        test.start();</span><br><span class="line">        <span class="keyword">while</span> (!test.isFlag()) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (test) &#123; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        fun.accept(<span class="string">"你真厉害"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testmain</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Consumer&lt;String&gt; fun = System.out::println;</span><br><span class="line">        Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        test.start();</span><br><span class="line">        <span class="keyword">synchronized</span> (test) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!test.isFlag()) &#123; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        fun.accept(<span class="string">"你真厉害"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h2><p>现在来看一下加volatile修饰的方式,每个线程在操作数据的时候，会将数据从主内存中拷贝一份副本到当前线程的工作内存，如果该线程对于副本操作，并且写回了。<br>那么其他线程所取得的副本就失效了。需要对数据操作的话就又得从主存中重新读取。而volatile可以保证不同线程对于该变量的可见性，也就是当一个线程对于该数据操作之后，并写回主存，其他线程就可以立即获得该变量最新的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFlag</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.flag = <span class="keyword">true</span>;</span><br><span class="line">        System.out.println(<span class="string">"flag is "</span>+ flag);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那当有多个线程同时对<code>flag</code>进行操作，那刷新到主存中以谁的数据为准呢？对于这种缓存不一致性问题，通常有两种方式：</p><ul><li>通过在总线加LOCK#锁的方式（锁总线）</li><li>通过某些缓存一致性协议（锁缓存）</li></ul><h3 id="锁总线"><a href="#锁总线" class="headerlink" title="锁总线"></a>锁总线</h3><p>CPU总线是CPU与所有芯片连接的主干道，当一个CPU要操作数据的时候，它向总线发送一个<code>LOCK#</code>的信号，其他处理器就会处于阻塞状态。从而使该CPU可以独享此共享内存。但是锁总线会导致其他CPU与共享内存之间的通信被锁住，导致对其他共享内存的数据也无法操作，因此开销较大。</p><h3 id="锁缓存"><a href="#锁缓存" class="headerlink" title="锁缓存"></a>锁缓存</h3><p>以在Intel系列中广泛使用的MESI协议为例，当CPU操作数据的时候，如果发现该变量是一个共享变量，即在其他处理器中也存在该变量的副本。那么就会发信号告知该CPU将该变量的缓存行置为无效状态。当其他CPU需要读取这个数据的时候，会查看该变量是否是失效状态，如果是失效状态，会重新从共享内存中重新读取该变量的值。至于CPU是如何发现数据是否已经过期。是CPU通过<code>嗅探</code>在总线上传播的数据来检查自己的缓存是否过期。当处理器发现自己缓存行对应的内存地址被修改，就会将当前处理器的缓存行置为失效状态，当处理器需要对这个数据进行<code>读取(操作)</code>的时候，会重新从系统内存中读取该数据。</p><blockquote><p>由于volatile的mesi缓存一致性协议需要不断的从主内存嗅探和cas不断循环无效交互导致总线带宽达到峰值<code>(总线风暴)</code>。因此不要大量使用volatile。</p></blockquote><h2 id="指令重排序"><a href="#指令重排序" class="headerlink" title="指令重排序"></a>指令重排序</h2><blockquote><p>为了提高性能，编译器和处理器常常会对既定的代码执行顺序进行指令重排序。</p></blockquote><p>一段源码，到最后执行，需要经历那些重排序规则呢？</p><p><img src="00.png" alt="源码到执行指令经历的重排序"></p><p>一个好的内存模型，会尽可能小的去约束处理器和编译器，在不改变程序执行结果的情况下，尽可能提高程序的执行效率。因此JMM会尽量减少对底层的约束，使其能够发挥自身优势。</p><p>一般重排序分为以下三种：</p><ul><li>编译器的重排序：编译器在不改变单线程语义的情况下，可以重新定义语句执行顺序</li><li>指令集并行的重排序：现代处理器采用了指令级并行技术来将多条指令重叠执行。如果不存在数据依赖性，处理器可以改变语句对应机器指令的执行顺序</li><li>内存系统的重排序：由于处理器使用缓存和读/写缓冲区，这使得加载和存储操作看上去可能是在乱序执行的</li></ul><p>这里要提到一个概念：<code>as-if-serial</code>。</p><blockquote><p>不管怎么重排序，单线程下的执行结果不能被改变。编译器、runtime和处理器都必须遵守as-if-serial语义。</p></blockquote><h3 id="Volatile如何禁止重排序"><a href="#Volatile如何禁止重排序" class="headerlink" title="Volatile如何禁止重排序"></a>Volatile如何禁止重排序</h3><p>java编译器会在生成指令系列时在适当的位置会插入<code>内存屏障</code>指令来禁止特定类型的处理器重排序。并且为了实现volatile的内存语义，为了实现volatile的内存语义，JMM会限制特定类型的编译器和处理器重排序，JMM会针对编译器制定volatile重排序规则表：</p><div class="table-container"><table><thead><tr><th>能否重排序</th><th></th><th><strong>第二个操作</strong></th><th></th></tr></thead><tbody><tr><td><strong>第一个操作</strong></td><td>普通读（写）</td><td>volatile（读）</td><td>volatile（写）</td></tr><tr><td>普通读（写）</td><td></td><td></td><td>NO</td></tr><tr><td>volatile（读）</td><td>NO</td><td>NO</td><td>NO</td></tr><tr><td>volatile（写）</td><td></td><td>NO</td><td>NO</td></tr></tbody></table></div><blockquote><p>volatile<code>写</code>是在<code>前面和后面</code>分别插入内存屏障，而volatile<code>读</code>操作是在<code>后面插入两个</code>内存屏障。</p></blockquote><p><img src="01.png" alt="volatile写"></p><p><img src="02.png" alt="volatile读"></p><p>上述重排序规则，为了提高处理速度，JVM往往会对代码进行指令重排序优化。并发编程下指令重排序会带来一些安全隐患：如指令重排序导致的多个线程操作之间的不可见性。</p><p>从JDK5开始，提出了<code>happens-before</code>的概念，通过这个概念来阐述操作之间的内存可见性。</p><h3 id="happens-before"><a href="#happens-before" class="headerlink" title="happens-before"></a>happens-before</h3><p>如果一个操作执行的结果需要对另一个操作可见，那么这两个操作之间必须存在happens-before关系。<br><code>volatile域规则：对一个volatile域的写操作，happens-before于任意线程后续对这个volatile域的读。</code><br>如果现在我的变了flag变成了false，那么后面的那个操作，一定要知道我变了。</p><p>一定要记住<code>volatile无法保证原子性</code>，如果非要保证原子性，可以采用concurrent包下的一些原子类或者给加锁。关于volatile的应用，可以看之前有一篇讲单例的文章<a href="/2020/09/25/那些年我们学过的设计模式，你还记得几个（一）/">2020-09-25-那些年我们学过的设计模式，你还记得几个（一）</a>。</p><h3 id="volatile和synchronized的区别"><a href="#volatile和synchronized的区别" class="headerlink" title="volatile和synchronized的区别"></a>volatile和synchronized的区别</h3><ul><li>volatile只能修饰实例变量和类变量，而synchronized可以修饰方法，以及代码块。</li><li>volatile保证数据的可见性，但是不保证原子性(多线程进行写操作，不保证线程安全);而synchronized是一种排他(互斥)的机制。</li><li>volatile用于禁止指令重排序：可以解决单例双重检查对象初始化代码执行乱序问题。</li><li>volatile可以看做是轻量版的synchronized，volatile不保证原子性，但是如果是对一个共享变量进行多个线程的赋值，而没有其他的操作，那么就可以用volatile来代替synchronized，因为赋值本身是有原子性的，而volatile又保证了可见性，所以就可以保证线程安全了。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><p>volatile修饰符适用于以下场景：某个属性被多个线程共享，其中有一个线程修改了此属性，其他线程可以立即得到修改后的值，比如booleanflag;或者作为触发器，实现轻量级同步。</p></li><li><p>volatile属性的读写操作都是无锁的，它不能替代synchronized，因为它没有提供原子性和互斥性。因为无锁，不需要花费时间在获取锁和释放锁_上，所以说它是低成本的。</p></li><li><p>volatile只能作用于属性，我们用volatile修饰属性，这样compilers就不会对这个属性做指令重排序。</p></li><li><p>volatile提供了可见性，任何一个线程对其的修改将立马对其他线程可见，volatile属性不会被线程缓存，始终从主存中读取。</p></li><li><p>volatile提供了happens-before保证，对volatile变量v的写入happens-before所有其他线程后续对v的读操作。</p></li><li><p>volatile可以使得long和double的赋值是原子的。</p></li><li><p>volatile可以在单例双重检查中实现可见性和禁止指令重排序，从而保证安全性。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈红黑树</title>
      <link href="2020/11/05/%E6%B5%85%E8%B0%88%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
      <url>2020/11/05/%E6%B5%85%E8%B0%88%E7%BA%A2%E9%BB%91%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>在网上很多博客上面看到有些讲红黑树的文章都不能完整描述它的体系，对于树的调平染色也没有很详细的介绍，因此让很多人觉得红黑树很难理解。但红黑树的应用场景还是很常见的。</p><p>JAVA8中HashMap的底层实现，就为了解决过度哈希冲突而造成的长链表，从而将链表转换为红黑树；Linux中的CFS进程调度算法，vruntime利用红黑树来存储；多路复用EPoll核心结构也是采用红黑树和双向链表来存储。</p><p>了解红黑树的结构，有助于我们去理解一些底层实现，并且红黑树本身也是对树结构的一种高度应用。包括多叉树、树平衡调整、树节点旋转。其实红黑树的本质就是对2-3-4树的概念模型一种具体实现。</p><h3 id="2-3-4树"><a href="#2-3-4树" class="headerlink" title="2-3-4树"></a>2-3-4树</h3><p>2-3-4树是<code>阶数</code>为4的B树，B树，全名BalanceTree，平衡树。这种结构主要用来做查找。它最重要的特性在于平衡，这使得我们能够在最坏情况下也保持O(LogN)的时间复杂度实现查找（一个不具备平衡性的查找树可能退化成单链表，时间复杂度会到O（N））。</p><blockquote><p>平衡的定义是说从空链接到根节点距离相等，此处一定要用心理解。（也就是说非叶子节点是不会存在空链接的）</p></blockquote><p>因为2-3-4是一个<code>阶数</code>为4的数，所以他会存在以下几个节点：</p><ul><li>2结点 2节点中存放着一个key[X]，两个指针，分别指向小于X的子节点和大于X的子节点；</li><li>3结点 3节点中存放在两个key[X,Y],三个指针，分别指向小于X的子节点，介于X~Y之间的子节点和大于Y的子节点；</li><li>4结点 4节点中存放在两个key[X,Y,Z],四个指针，理论同上</li></ul><p><img src="49.png" alt="2-3-4数图解"></p><h3 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h3><p>红黑树是对概念模型2-3-4树的一种实现，由于直接进行不同节点间的转化会造成较大的开销，所以选择以二叉树为基础，在二叉树的属性中加入一个<code>颜色</code>属性来表示2-3-4树中不同的节点。<br>2-3-4树中的2节点对应着红黑树中的<code>黑色节点</code>，而2-3-4树中的非2节点是以<code>红节点+黑节点</code>的方式存在，红节点的意义是与黑色父节点结合，表达着2-3-4树中的3，4节点。</p><p>我们先看2-3-4树到红黑树的节点转换。2节点直接转化为黑色节点；3节点这里可以有两种表现形式，左倾红节点或者右倾红节点。而4节点被强制要求转化为一个黑父带着左右两个红色儿子。</p><p><img src="50.png" alt="2-3-4树转红黑树"></p><p>本文主要针对2-3树的左倾红黑树进行探讨，也就是说，如果一个树中出现了<code>红色</code>结点，那么这个结点一定是<code>左儿子</code>，这也是<code>算法4</code>中给出的红黑树的实现方式。</p><ul><li>这种实现方式不用考虑2-3-4树中复杂的4节点分裂</li><li>这种限定能够很大的减少红黑树调整过程中的复杂性</li></ul><p><img src="51.png" alt="2-3树转红黑树"></p><p>如果说这样还是比较抽象的话，那下面这个左倾红黑树转2-3树应该能够清晰的描绘他们之间的关系了。</p><p><img src="52.png" alt="左倾红黑树转2-3树"></p><p>在了解红黑树的插入删除操作之前，我们需要先了解2-3树的插入删除操作，才能理解红黑树中染色和旋转背后的意义。插入操作需要遵循一个原则：</p><blockquote><p>先将这个元素尝试性地放在已经存在的节点中，如果要存放的节点是2节点，那么插入后会变成3节点，如果要存放的节点是3节点，那么插入后会变成4节点（临时）。<br>然后对可能生成的临时4节点进行分裂处理，使得临时4节点消失。</p></blockquote><p><img src="53.jpg" alt="2-3-4树插入(1)"><br><img src="54.jpg" alt="2-3-4树插入(2)"></p><p>正对应了红黑树在插入的时候一定会把待插入节点涂成红色，因为红色节点的意义是与<code>父节点</code>进行关联，形成概念模型2-3树中的3节点或者临时4节点。</p><p>而红黑树之所以需要在插入后进行调整，正是因为可能存在着概念模型中的临时4节点（反应在红黑树中是双红的情况）。</p><p>试想在2-3树中如果待插入节点是个2节点，那么反应在红黑树中，不正好对应着黑色父节点吗，在黑色父节点下面增加一个红色儿子，确实不会违背红黑树的任何规则，这也对应着我们向2-3树中的2节点插入一个元素，只需要简单的把2节点变成3节点。</p><p>接下来让我们来看一下对于2-3树的删除。对于2-3树的删除我们主要要考虑待删除元素在2节点这种情况，因为如果待删除元素在3节点，那么可以直接将这个元素删除，而不会破坏2-3树的任何性质（删除这个元素不会引起高度的变化）。</p><p>当待删除元素在2节点的时候，由于删除这个元素会导致2节点失去自己唯一的元素，引发2节点自身的删除，会使得树中某条路径的高度发生变化，树变得不平衡。<br>因此我们有两种方案去解决这个问题：</p><ul><li>先删除这个2节点，然后对树进行平衡调整。</li><li>想办法让这个被删除的元素不可能出现在2节点中。</li></ul><p>这里选择第二种方案，我们在搜索到这个节点的路径中，不断地判断当前节点是否为2节点，如果是，就从它的兄弟节点或者它的父节点借一个元素，使得当前节点由2节点成为一个3节点或者一个临时4节点（视具体情况而定，在后面的红黑树部分会详细介绍）。</p><p>这种操作会产生一种结果：除非当前节点是根节点，否则当前节点的父节点一定是一个非2节点（因为搜索的路径是自上而下，父节点已经进行过了这种操作，所以不可能是2节点），那么我们可以保证到达叶子节点的时候，也能顺利的从父节点或者兄弟节点处借到元素，使得自己成为非2节点。从而能够直接删除某个元素（现在这个元素不在2节点中了）。</p><p><img src="55.jpg" alt="2-3树的删除"></p><h3 id="再品红黑树"><a href="#再品红黑树" class="headerlink" title="再品红黑树"></a>再品红黑树</h3><p><img src="56.png" alt="红黑树中的红黑结点"></p><p>来品一下红黑树的5条定义</p><ul><li><p>红黑树结点颜色的有黑色和红色</p><blockquote><p>2-3树到红黑树的转化已经详细说明</p></blockquote></li><li><p>根结点一定是黑色</p><blockquote><p>2-3树中如果根节点为2节点，那么它本来就对应红黑树中黑节点；如果根节点为3节点，也可以用黑色节点表示较大的那个元素，然后较小的元素作为左倾红节点存在于红黑树中</p></blockquote></li><li><p>所有叶子节点都是黑色</p><blockquote><p>这里的叶子其实是空链接</p></blockquote></li><li><p>任意节点到叶子节点经过的黑色节点数目相同</p><blockquote><p>红黑树中的红节点是和黑色父节点绑定的，在2-3树中本来就是同一层的，只有黑色节点才会在2-3树中真正贡献高度，由于2-3树的任一节点到空链接距离相同，因此反应在红黑树中就是<code>黑色完美平衡</code></p></blockquote></li><li><p>不会有连续的红色节点</p><blockquote><p>2-3树中本来就规定没有4节点，2-3-4树中虽然有4节点，但是要求在红黑树中体现为一黑色节点带两红色儿子，分布左右，所以也不会有连续红节点</p></blockquote></li></ul><hr><blockquote><p>现在就能看的出来红黑树的定义背后正浮现着一颗2-3树概念模型。虽然我们已经有了这样的认识，但是红黑树作为真正的实现模型，我们还是要回到这个实现本身来探究它的一系列操作</p></blockquote><h4 id="作为二叉查找树"><a href="#作为二叉查找树" class="headerlink" title="作为二叉查找树"></a>作为二叉查找树</h4><p>二叉查找树的节点有一个元素X和两个指针域，左指针指向小于X的元素，右指针指向大于X的元素。</p><p>假设我们的插入序列是1~10，那么这颗树会演变成只有右链接的形式，树高会增加到10层，这个时候已经不具备O(LogN)的查找时间复杂度，因为这颗树退化成了链表。</p><p>因此对二叉树进行平衡调整是很重要的一个环节，无论是AVL还是红黑树，它们本质上都是希望尽可能保证这颗二叉查找树中的元素尽量均衡的分布在树的两侧。</p><p>当我们向一颗二叉查找树中插入一个元素Y的时候，我们会一直与树中的节点进行大小比较，如果Y小于当前元素，就往左走，如果Y大于当前元素，就往右走，直到达到叶子节点，这个时候我们可以把Y插入这颗二叉查找树了。</p><p>由于这次的插入动作，整棵树可能会发生一些不平衡，因此我们需要在插入后进行一次平衡调整，使得整棵树恢复到平衡的状态（具体如何调整，要看树是AVL还是红黑树亦或是其他的平衡树）。</p><p>二叉查找树的删除是一个很有意思的问题，不同于插入的是，待删除的元素并不能保证一定出现在树中的叶子节点。这将带来一个棘手的情景，即我们需要从树的中间部分取走一个元素，而且在取走后还需要经过调整来使得整颗树满足平衡的性质。从树的中间部分直接取走一个节点的场景实在是太多，也牵扯到了太多相关的节点，这种操作很难实现。</p><p>好在有人提出了一个观点，我们对查找树中一个节点的删除，其实可以不必真的改动这个节点的位置。由于查找树的特殊性质，将某个元素节点删除后，它有两个最佳替代者，分别是有序序列中的前驱元素和后继元素。</p><p>我们还是以一个包含元素1~10的二叉查找树为例，如果我们希望删除5所在的节点，那么让4或者6替代它的位置都是可行的。作为前驱元素的4，会存放在5所在节点的左子树的最右侧；作为后继元素的6，会存放在5所在节点的右子树的最左侧。</p><p>关于这个结论，大家只需稍加思索便可以明白。</p><p>现在我们又让问题简化了，也就是说，删除某个节点的时候，我们先找到它的前驱元素或者后继元素（随便选一个），将它的前驱元素直接填到待删除的节点，然后再把它的前驱元素或者后继元素删除。</p><p>这个时候问题就转化成了在二叉查找树中删除一个没有左子树的节点（或者是一个没有右子树的节点），我们只需要将这个节点删除再进行对应的平衡调整即可（虽然还是需要调平，但是比直接在树中层删除一个同时具备左右儿子的节点要容易很多）。</p><p>注意，此处并没有强调是针对红黑树的操作，因为红黑树和AVL都是二叉查找树，它们都适用这个方法。</p><h4 id="树的旋转"><a href="#树的旋转" class="headerlink" title="树的旋转"></a>树的旋转</h4><p>为了调平一颗二叉树，使得其左右节点数目分布均匀，通常会选择旋转的手段。你可以把一颗二叉树某节点的左右子树想象成天平上待称量的物品，如果哪边重了，我们就从重的那边拿出一部分，加到轻的那边，以此保持相对的平均。</p><p>以X为旋转点的左旋</p><p><img src="58.png" alt="左旋调平"></p><p>以X为旋转点的右旋</p><p><img src="59.png" alt="右旋调平"></p><p>理解了这些之后，再去看红黑树的插入删除，就能够理解旋转和染色背后的意义了。我们仍然选择算法4中的左倾红黑树作演示：首先看<code>插入</code></p><h4 id="左倾红黑树的插入"><a href="#左倾红黑树的插入" class="headerlink" title="左倾红黑树的插入"></a>左倾红黑树的插入</h4><p><img src="60.png" alt="红黑树基树"></p><p>对于上述左倾红黑树的插入一共有三种可能的情况：</p><ul><li>待插入元素比黑父大，插在了黑父的右边，而黑父左边是红色儿子。这种情况会导致在红黑树中出现右倾红节点。</li></ul><p>这种情况对应着2-3树中出现了临时4节点，我们在2-3树中的处理是将这个临时4节点分裂，左右元素各自形成一个2节点，中间元素上升到上层跟父节点结合。所以，我们在红黑树中的动作是，将原本红色的左右儿子染黑（左右分裂），将黑父染红（等待上升结合）。</p><p><img src="61.png" alt="红黑树基于黑叔插入图1"></p><ul><li>待插入元素比红父小，且红父自身就是左倾。听起来有点绕，看图就会明白，其实就是说红父和待插入元素同时靠在了左边，形成了连续的红节点。</li></ul><p>这种情况我们需要用两步来调整。由于我们插入的是红色节点，其实不会破坏黑色完美平衡，所以要注意的是在旋转和染色的过程种继续保持这种完美黑色平衡。<br>首先对红父的父亲进行一次右旋，这次右旋不会破坏黑色平衡，但是也没有解决连续红色的问题。<br>接下来将12所在节点与15所在节点交换颜色，这样的目的是为了消除连续红色，并且这个操作依旧维持了黑色平衡。现在我们已经得到了情况1的场景，直接按情况1处理即可。</p><p><img src="62.png" alt="红黑树基于黑叔插入图2"></p><ul><li>待插入元素比红父大，且红父自身就是左倾。</li></ul><p>也就是说插入的这个节点形成了一个右倾的红色节点，对右倾的处理很简单，将红父进行一次左旋，就能使得右倾红节点变为左倾，现在出现了连续的左倾红节点，直接按情况2处理即可。</p><p><img src="63.png" alt="红黑树基于黑叔插入图3"></p><p>在插入时，可以体会到左倾红黑树对于左倾的限制带来的好处，因为在原树符合红黑树定义的情况下，如果父亲是红的，那么它一定左倾，同时也不用考虑可能存在的右倾兄弟（如果有，那说明原树不满足红黑树定义）。</p><p>这种限制消除了很多需要考虑的场景，让插入变得更加简单。</p><h4 id="左倾红黑树的删除"><a href="#左倾红黑树的删除" class="headerlink" title="左倾红黑树的删除"></a>左倾红黑树的删除</h4><p>左倾红黑树的删除需要借鉴之前提到的<code>二叉查找树通用的删除</code>策略，当我们要删除某个节点的时候选择它的前驱节点或者后继节点元素来替代它，转而删除它的前驱/后继节点。</p><p>这里我们用<code>后继节点</code>来替代被删除节点。</p><p>假设我们需要删除的节点它的右子树如图所示，那么对该节点的删除实际上转为了对2的删除。</p><p>我们从当前的根节点出发，利于2-3树中预合并的策略逐层对红黑树进行调整。具体的做法是，每次都保证当前的节点是2-3树中的非2节点，如果当前节点已经是非2节点，那么直接跳过；如果当前节点是2节点，那么根据兄弟节点的状况来进行调整：</p><ul><li><p>如果兄弟是2节点，那么从父节点借一个元素给当前节点，然后与兄弟节点一起形成一个临时4节点。</p></li><li><p>如果兄弟是非2节点，那么兄弟上升一个元素到父节点，同时父节点下降一个元素到当前节点，使得当前节点成为一个3节点。</p></li></ul><p>这样的策略能够保证最后走到待删除节点的时候，它一定是一个非2节点，我们可以直接将其元素删除。</p><p><img src="64.png" alt="左倾红黑树的删除"></p><p>接下来要考虑的是修复工作，由于红黑树定义的限制，我们在调整的过程中出现了一些本不该存在的<code>红色右倾节点</code>（因为生成了概念模型中的临时4节点），于是我们顺着搜索的方向向上<code>回溯</code>，如果遇到当前节点具备右倾的红色儿子，那么对当前节点进行一次左旋，这时原本的右儿子会来到当前节点的位置，然后将右儿子与当前节点交换颜色，我们就将右倾红节点修复成了左倾红节点，同时我们并没有破坏黑色节点的平衡。</p><p><img src="65.png" alt="左倾红黑树修复"></p><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><ul><li>你知道了红黑树的五条定义，如果我构造一颗只有黑色节点的红黑树，这样子可行吗？因为这样子没有破坏任何一条红黑树的规则。</li><li>那么请问红黑树中要红节点干什么呢？红节点的真实意义是什么呢？</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 红黑树 </tag>
            
            <tag> HashMap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一下最近刷题的一些小想法</title>
      <link href="2020/10/30/%E4%B8%80%E9%81%93%E7%AE%97%E6%B3%95%E9%A2%98%E5%BC%95%E5%8F%91%E7%9A%84%E6%83%AF%E6%80%A7%E6%80%9D%E7%BB%B4/"/>
      <url>2020/10/30/%E4%B8%80%E9%81%93%E7%AE%97%E6%B3%95%E9%A2%98%E5%BC%95%E5%8F%91%E7%9A%84%E6%83%AF%E6%80%A7%E6%80%9D%E7%BB%B4/</url>
      
        <content type="html"><![CDATA[<p>事情的起因还是要从我昨天上班赚（mo）钱（yu）开始说起，最近项目比较闲，于是我在intelij上面装了一个leetcode插件，每天日常刷一刷leetcode题。就在昨天，我刷到了这样一题</p><hr><p>给定一个较长字符串<code>big</code>和一个包含较短字符串的数组<code>smalls</code>，设计一个方法，根据<code>smalls</code>中的每一个较短字符串，对<code>big</code>进行搜索。输出<code>smalls</code>中的字符串在<code>big</code>里出现的所有位置<code>positions</code>，其中<code>positions[i]</code>为<code>smalls[i]</code>出现的所有位置。</p><p><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">big &#x3D; &quot;mississippi&quot;</span><br><span class="line">smalls &#x3D; [&quot;is&quot;,&quot;ppi&quot;,&quot;hi&quot;,&quot;sis&quot;,&quot;i&quot;,&quot;ssippi&quot;]</span><br><span class="line">输出： [[1,4],[8],[],[3],[1,4,7,10],[5]]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= len(big) &lt;= 1000</code></li><li><code>0 &lt;= len(smalls[i]) &lt;= 1000</code></li><li><code>smalls</code>的总字符数不会超过 100000。</li><li>你可以认为<code>smalls</code>中没有重复字符串。</li><li>所有出现的字符均为英文小写字母。</li></ul><p><strong>解法：</strong></p><p>看到判断字符串在母串的位置，很容易让人想到indexOf(str)，我们可以记录indexOf(str)返回值，但<code>smalls</code>中特定位的字符在<code>big</code>出现的次数是未知数x，所以可以用一个可变数组List来存储这个字符在<code>big</code>中出现的次数。而indexOf(str)默认返回的是str在母串中第一次的索引值，String还提供了indexOf(str,index)来记录从第一个开始的索引值，因此可以采用indexOf(str,index+1)来避免记录重复值。<br>所以解法就很简单，先用indexOf获取索引值，然后存储在一个长度可变的数组List中，接着讲List再转成固定长度数组，返回给result[i]。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][] multiSearch(String big, String[] smalls) &#123;</span><br><span class="line">        <span class="keyword">int</span> [][] result = <span class="keyword">new</span> <span class="keyword">int</span> [smalls.length][];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; smalls.length ; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">""</span>.equals(big))&#123;</span><br><span class="line">                result[i] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(!smalls[i].equals(<span class="string">""</span>))&#123;</span><br><span class="line">                <span class="keyword">int</span> index = big.indexOf(smalls[i]);</span><br><span class="line">                List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                <span class="keyword">while</span> (index&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">                    list.add(index);</span><br><span class="line">                    index = big.indexOf(smalls[i],index+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                result[i] = parseList2Array(list);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                result[i] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] parseList2Array(List&lt;Integer&gt; list)&#123;</span><br><span class="line">        <span class="keyword">int</span> [] index = <span class="keyword">new</span> <span class="keyword">int</span>[list.size()];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size() ; i++) &#123;</span><br><span class="line">            index[i] = list.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题很简答，但是我越刷(mo yu)越开心，又刷到了这样一题。</p><hr><p> 给定字符串<code>J</code> 代表石头中宝石的类型，和字符串 <code>S</code>代表你拥有的石头。 <code>S</code> 中每个字符代表了一种你拥有的石头的类型，你想知道你拥有的石头中有多少是宝石。</p><p><code>J</code> 中的字母不重复，<code>J</code> 和 <code>S</code>中的所有字符都是字母。字母区分大小写，因此<code>&quot;a&quot;</code>和<code>&quot;A&quot;</code>是不同类型的石头。</p><p><strong>示例 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: J &#x3D; &quot;aA&quot;, S &#x3D; &quot;aAAbbbb&quot;</span><br><span class="line">输出: 3</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: J &#x3D; &quot;z&quot;, S &#x3D; &quot;ZZ&quot;</span><br><span class="line">输出: 0</span><br></pre></td></tr></table></figure><p><strong>注意:</strong></p><ul><li><code>S</code> 和 <code>J</code> 最多含有50个字母。</li><li><code>J</code> 中的字符不重复。</li></ul><p>我直接一波惯性思维，想到了indexOf真香(主要简单)，把<code>J</code>拆成char[],那每个char[i],不就相当于上一题里面的small[i]吗，这样一想，其实还是在母串里找每个字符出现的次数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numJewelsInStones</span><span class="params">(String J, String S)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span>[] charArray = J.toCharArray();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> item: charArray) &#123;</span><br><span class="line">        <span class="keyword">int</span> index = S.indexOf(item);</span><br><span class="line">        <span class="keyword">while</span> (index&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            result++;</span><br><span class="line">            index = S.indexOf(item,index+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解答出来之后，我就开始思考有没有其他方法可以更简单或者更快的解决这个题目。还是从刚刚这个思路切入，把<code>J</code>切成char[]，因为<code>S</code>中的char[i]可能是多个，所以还需要像上一题这样多次搜索，但是<code>J</code>中的元素是不会重复的，如果把<code>S</code>拆成char[]，那么对应可以直接在<code>J</code>中进行一次搜索，而且因为不需要取索引值，所以可以直接用J.contains(char[i])，看返回的布尔值，实现计数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numJewelsInStones</span><span class="params">(String J, String S)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span>[] charArray = S.toCharArray();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> item: charArray) &#123;</span><br><span class="line">        <span class="keyword">if</span>(J.contains(item+<span class="string">""</span>))&#123;</span><br><span class="line">            result++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进一步思考，既然<code>J</code>的每个元素都不相同，那么我们可以采用元素都不重复的集合Set来存储J的每一个元素。不过这样需要对两个字符串都转数组，虽然简单但是感觉不如上述代码简洁。。。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numJewelsInStones</span><span class="params">(String J, String S)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">    HashSet&lt;Character&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">char</span>[] chars = J.toCharArray();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> item: chars) &#123;</span><br><span class="line">        set.add(item);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; S.length(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(set.contains(S.charAt(i)))</span><br><span class="line">            result++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写完这些，是不是突然发现，既然是用<code>J</code>中的每一个字符去挨个遍历<code>S</code>中的每一个字符。那么最粗暴的方法当然是双重for循环。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numJewelsInStones</span><span class="params">(String J, String S)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">char</span> Jitem : J.toCharArray())&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> Sitem : S.toCharArray())&#123;</span><br><span class="line">            <span class="keyword">if</span>(Jitem == Sitem)&#123;</span><br><span class="line">                result++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述方法虽然简单，但是这样效率极低极低，这样的写法相当于是把整个<code>J</code>和整个<code>S</code>都遍历了一遍，相当于执行了<code>J.length*S.length</code>次。因为这里<code>J</code>的每一个字符都是唯一不重复的。那么我们可以用<code>S</code>去匹配<code>J</code>,找到自己break当前小循环直接进入下一次大循环，就会少一些遍历<code>J</code>中剩下的字符次数，相对而言就会少执行很多次循环体。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numJewelsInStones</span><span class="params">(String J, String S)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> Sitem : S.toCharArray())&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">char</span> Jitem : J.toCharArray())&#123;</span><br><span class="line">                <span class="keyword">if</span>(Jitem == Sitem)&#123;</span><br><span class="line">                    result++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>快乐的上班(mo yu)时光总是很短暂，下班啦~~~~</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM垃圾回收与内存分配</title>
      <link href="2020/09/27/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E4%B8%8E%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/"/>
      <url>2020/09/27/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E4%B8%8E%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</url>
      
        <content type="html"><![CDATA[<p>Java与C++之间有一堵由内存动态分配和垃圾收集技术所围成的高墙，外面的人想进来，里面的人想出去。</p><blockquote id="fn_引用"><sup>引用</sup>. 《深入理解JAVA虚拟机》<a href="#reffn_引用" title="Jump back to footnote [引用] in the text."> &#8617;</a></blockquote><p>JAVA相对于C/C++而言引入了GC机制，使程序员更加去关注程序本身，不需要再对每个new的对象去进行delete/free操作。C++就好像你在家里自己恰饭，需要去自己做好。吃完之后还要自己收拾。而JAVA更像是在餐厅中吃饭，你不需要去关注饭是如何做好的，以及吃完以后服务员是如何收拾的，你只要负责享用美食就可以了。</p><hr><h2 id="JVM内存区域"><a href="#JVM内存区域" class="headerlink" title="JVM内存区域"></a>JVM内存区域</h2><p>了解GC之前，我们需要先了解JVM的内存模型，搞清楚被回收的数据一般存在在哪些区域。</p><p><img src="jvmncqy.png" alt="JVM内存区域"></p><ul><li>虚拟机栈：描述方法执行时的内存模型，属于线程私有，生命周期同线程一样。主要保存执行方法时的局部变量表、操作数栈、动态连接和方法返回地址等信息,方法执行时入栈，方法执行完出栈，出栈之后数据清空，不需要GC。</li><li>本地方法栈：主要存储虚拟机调用native方法/服务相关信息。大体逻辑和虚拟机栈相同，也不需要GC。</li><li>程序技术器：主要记录当前线程执行字节码的行号。是<code>唯一一个</code>在 Java 虚拟机规范中没有规定任何 OOM 情况的区域，所以也不需要GC。</li><li>本地内存：线程共享区域。在JAVA8之前，方法区是在堆内的实现的。受GC管理，JAVA8把方法区的实现移到了本地内存中的元空间。这样方法区就不受JVM控制，也不会进行GC，也提升了性能，因为发生 GC 会发生 Stop The Word,造成性能受到一定影响，也方便在元空间中统一管理。</li><li>堆：堆是GC 发生的主要区域，对象实例和数组都是在堆上分配的，GC 也主要对这两类数据进行回收。接下来我们也终点分析这块区域。</li></ul><h2 id="如何判断垃圾"><a href="#如何判断垃圾" class="headerlink" title="如何判断垃圾"></a>如何判断垃圾</h2><h3 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h3><p>简单来说就是对每个对象去添加一个引用计数器，每当有一个地方引用他，计数器就加一，当引用失效就减一。如果没有被引用（引用次数为 0），则此对象可回收。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String ref = <span class="keyword">new</span> String(<span class="string">"Java"</span>);</span><br></pre></td></tr></table></figure><p><img src="630.png" alt="引用计数"></p><p>ref 引用了右侧定义的对象，所以引用次数是 1 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ref &#x3D; null;</span><br></pre></td></tr></table></figure><p>对象没被引用，引用次数置为 0，由于不被任何变量引用，此时即被回收</p><p><img src="640.gif" alt="引用计数"></p><p>但单纯的引用计数无法解决对象之间的相互循环引用的问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestRCGC</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    TestRCGC instance;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestRCGC</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 第一步</span></span><br><span class="line">    A a = <span class="keyword">new</span> TestRCGC(<span class="string">"a"</span>);</span><br><span class="line">    B b = <span class="keyword">new</span> TestRCGC(<span class="string">"b"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第二步</span></span><br><span class="line">    a.instance = b;</span><br><span class="line">    b.instance = a;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第三步</span></span><br><span class="line">    a = <span class="keyword">null</span>;</span><br><span class="line">    b = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="650.png" alt="循环引用"></p><p>虽然最后 a，b 都被置为 null 了，但是由于之前它们指向的对象互相指向了对方（引用计数都为 1），所以无法回收，也正是由于无法解决循环引用的问题，所以现代JAVA虚拟机都不用引用计数法来判断对象是否应该被回收。</p><h3 id="可达性分析法"><a href="#可达性分析法" class="headerlink" title="可达性分析法"></a>可达性分析法</h3><p>当前主流的内存管理系统基本都是采用的可达性分析算法来判定对象是否存活。它的原理是通过一系列“GC Roots”的根对象作为起始节点集。从这个节点开始，通过引用向下搜索，搜索过程走的路被称为“引用链”，如果对象到“GC Roots”之间没有引用链相连的话，则说明这个对象是不可达的，也就是死亡的。</p><p><img src="660.png" alt="可达性分析"></p><p>如图所示：对象a和对象b之间，虽然存在循环引用，但是a，b之间不存在与GC Root想关联的引用，因此a,b是可回收的。<br>但是此时a,b并没有真正的死亡，而是处于一个“缓刑”的阶段。一个对象真正死亡需要同时满足两个条件，一个是对象与GC Roots没有相连接的引用链。另一个是对象是否有必要执行finallize()方法。如果对象未执行，则会先执行finallize()方法。如果执行该方法后对象仍不可达，则回收该对象，反之不回收该对象。<br>但是finallize只会被执行<code>一次</code>，如果在第一次执行了finallize之后对象仍然是可达的。那么下一次对象再被GC的时候会忽略finallize方法，会被回收。</p><p>那么这些 GC Roots 到底是什么东西呢，哪些对象可以作为 GC Root 呢，有以下几类</p><ul><li>虚拟机栈（栈帧中的本地变量表）中引用的对象</li><li>方法区中类静态属性引用的对象</li><li>方法区中常量引用的对象</li><li>本地方法栈中 JNI（即一般说的 Native 方法）引用的对象</li></ul><h4 id="虚拟机栈中引用的对象"><a href="#虚拟机栈中引用的对象" class="headerlink" title="虚拟机栈中引用的对象"></a>虚拟机栈中引用的对象</h4><p>a 是栈帧中的本地变量，当 a = null 时，由于此时 a 充当了 <strong>GC Root</strong> 的作用，a 与原来指向的实例 <strong>new Test()</strong> 断开了连接，所以对象会被回收。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Test a = <span class="keyword">new</span> Test();</span><br><span class="line">    a = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法区中类静态属性引用对象"><a href="#方法区中类静态属性引用对象" class="headerlink" title="方法区中类静态属性引用对象"></a>方法区中类静态属性引用对象</h4><p>当栈帧中的本地变量 a = null 时，由于 a 原来指向的对象与 GC Root (变量 a) 断开了连接，所以 a 原来指向的对象会被回收，而由于我们给 s 赋值了变量的引用，s 在此时是类静态属性引用，充当了 GC Root 的作用，它指向的对象依然存活。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Test s;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Test a = <span class="keyword">new</span> Test();</span><br><span class="line">    a.s = <span class="keyword">new</span> Test();</span><br><span class="line">    a = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法区中常量引用对象"><a href="#方法区中常量引用对象" class="headerlink" title="方法区中常量引用对象"></a>方法区中常量引用对象</h4><p>常量 s 指向的对象并不会因为 a 指向的对象被回收而回收</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Test s = <span class="keyword">new</span> Test();</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Test a = <span class="keyword">new</span> Test();</span><br><span class="line">        a = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地方法栈中-JNI-引用的对象"><a href="#本地方法栈中-JNI-引用的对象" class="headerlink" title="本地方法栈中 JNI 引用的对象"></a>本地方法栈中 JNI 引用的对象</h4><p>本地方法就是一个 java 调用非 java 代码的接口，该方法并非 Java 实现的，可能由 C 或 Python等其他语言实现的， Java 通过 JNI 来调用本地方法， 而本地方法是以库文件的形式存放的（在 WINDOWS 平台上是 DLL 文件形式，在 UNIX 机器上是 SO 文件形式）。通过调用本地的库文件的内部方法，使 JAVA 可以实现和本地机器的紧密联系，调用系统级的各接口方法。</p><p>当调用 Java 方法时，虚拟机会创建一个栈桢并压入 Java 栈，而当它调用的是本地方法时，虚拟机会保持 Java 栈不变，不会在 Java 栈祯中压入新的祯，虚拟机只是简单地动态连接并直接调用指定的本地方法。</p><p><img src="670.png" alt="栈帧"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL <span class="title">Java_com_pecuyu_jnirefdemo_MainActivity_newStringNative</span><span class="params">(JNIEnv *env, jobject instance，jstring jmsg)</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">   <span class="comment">// 缓存String的class</span></span><br><span class="line">   jclass jc = (*env)-&gt;FindClass(env, STRING_PATH);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当 java 调用以上本地方法时，jc 会被本地方法栈压入栈中, jc 就是我们说的本地方法栈中 JNI 的对象引用，因此只会在此本地方法执行完成后才会被释放。</p><h2 id="垃圾回收算法"><a href="#垃圾回收算法" class="headerlink" title="垃圾回收算法"></a>垃圾回收算法</h2><h3 id="标记清除算法"><a href="#标记清除算法" class="headerlink" title="标记清除算法"></a>标记清除算法</h3><p>先根据可达性算法<strong>标记</strong>出相应的可回收对象，对可回收的对象进行回收。</p><p><img src="680.png" alt="标记清除"></p><p>这种方式很简单，但是会有一个特别明显的问题，当大量的小对象死亡时，标记清除出来的碎片化空间就特别多。那么我们如何能获得一个连续内存空间呢？</p><h3 id="标记整理法"><a href="#标记整理法" class="headerlink" title="标记整理法"></a>标记整理法</h3><p>两步和标记清除法一样，不同的是它在标记清除法的基础上添加了一个整理的过程 ，即将所有的存活对象都往一端移动,紧邻排列，这样就可以解决碎片化空间的问题。</p><p><img src="690.png" alt="标记整理"></p><p>这种算法的缺点是每进一次垃圾清除都要频繁地移动存活的对象，效率十分低下。</p><h3 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h3><p>把堆等分成两块区域, A 和 B，区域 A 负责分配对象，区域 B 不分配, 对区域 A 使用以上所说的标记法把存活的对象标记出来（下图有误无需清除），然后把区域 A 中存活的对象都复制到区域 B（存活对象都依次<strong>紧邻排列</strong>）最后把 A 区对象全部清理掉释放出空间。</p><p><img src="700.png" alt="标记整理"></p><p>复制算法的缺点是比如给堆分配分配的内存只有一半是可用的，另外每次回收也要把存活对象移动到另一半，效率低下。</p><h3 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a>分代收集算法</h3><p>分代收集算法整合了以上算法，综合了这些算法的优点，最大程度避免了它们的缺点，所以是现代虚拟机采用的首选算法,与其说它是算法，倒不是说它是一种策略，因为它是把上述几种算法整合在了一起，为啥需要分代收集呢，来看一下对象的分配有啥规律</p><p><img src="710.png" alt="对象存活时间"></p><p><em>如图示：纵轴代表已分配的字节，而横轴代表程序运行时间</em></p><p>由图可知，大部分的对象都很短命，都在很短的时间内都被回收了（IBM 专业研究表明，一般来说，98% 的对象都是朝生夕死的，经过一次 Minor GC 后就会被回收），所以分代收集算法根据<strong>对象存活周期的不同</strong>将堆分成新生代和老生代（Java8以前还有个永久代）,默认比例为 1 : 2，新生代又分为 Eden 区， from Survivor 区（简称S0），to Survivor 区(简称 S1),三者的比例为 8: 1 : 1，这样就可以根据新老生代的特点选择最合适的垃圾回收算法，我们把新生代发生的 GC 称为 Young GC（也叫 Minor GC）,老年代发生的 GC 称为 Old GC（也称为 Full GC）。</p><p><img src="720.png" alt="新生代老年代"></p><h4 id="分代收集工作原理"><a href="#分代收集工作原理" class="headerlink" title="分代收集工作原理"></a>分代收集工作原理</h4><p><strong>1、对象在新生代的分配与回收</strong></p><p>由以上的分析可知，大部分对象在很短的时间内都会被回收，对象一般分配在 Eden 区</p><p><img src="730.png" alt="img"></p><p>当 Eden 区将满时，触发 Minor GC<img src="740.png" alt="img"></p><p>我们之前怎么说来着，大部分对象在短时间内都会被回收, 所以经过 Minor GC 后只有少部分对象会存活，它们会被移到 S0 区（这就是为啥空间大小  Eden: S0: S1 = 8:1:1, Eden 区远大于 S0,S1 的原因，因为在 Eden 区触发的 Minor GC 把大部对象（接近98%）都回收了,只留下少量存活的对象，此时把它们移到 S0 或 S1 绰绰有余）同时对象年龄加一（对象的年龄即发生 Minor GC 的次数），最后把 Eden 区对象全部清理以释放出空间,动图如下</p><p><img src="750.gif" alt="img"></p><p>当触发下一次 Minor GC 时，会把 Eden 区的存活对象和 S0（或S1） 中的存活对象（S0 或 S1 中的存活对象经过每次 Minor GC 都可能被回收）一起移到 S1（Eden 和 S0 的存活对象年龄+1）, 同时清空 Eden 和 S0 的空间。<img src="760.gif" alt="img"></p><p>若再触发下一次 Minor GC，则重复上一步，只不过此时变成了 从 Eden，S1 区将存活对象复制到 S0 区,每次垃圾回收, S0, S1 角色互换，都是从 Eden ,S0(或S1) 将存活对象移动到 S1(或S0)。也就是说在 Eden 区的垃圾回收我们采用的是<strong>复制算法</strong>，因为在 Eden 区分配的对象大部分在 Minor GC 后都消亡了，只剩下极少部分存活对象（这也是为啥 Eden:S0:S1 默认为 8:1:1 的原因），S0,S1 区域也比较小，所以最大限度地降低了复制算法造成的对象频繁拷贝带来的开销。</p><p><strong>2、对象何时晋升老年代</strong></p><ul><li>当对象的年龄达到了我们设定的阈值，则会从S0（或S1）晋升到老年代<img src="770.gif" alt="img">如图示：年龄阈值设置为 15， 当发生下一次 Minor GC 时，S0 中有个对象年龄达到 15，达到我们的设定阈值，晋升到老年代！</li><li>大对象 当某个对象分配需要大量的连续内存时，此时对象的创建不会分配在 Eden 区，会直接分配在老年代，因为如果把大对象分配在 Eden 区, Minor GC 后再移动到 S0,S1 会有很大的开销（对象比较大，复制会比较慢，也占空间），也很快会占满 S0,S1 区，所以干脆就直接移到老年代.</li><li>还有一种情况也会让对象晋升到老年代，即在 S0（或S1） 区相同年龄的对象大小之和大于 S0（或S1）空间一半以上时，则年龄大于等于该年龄的对象也会晋升到老年代。</li></ul><p><strong>3、空间分配担保</strong></p><p>在发生 MinorGC 之前，虚拟机会先检查老年代最大可用的连续空间是否大于新生代所有对象的总空间，如果大于，那么Minor GC 可以确保是安全的,如果不大于，那么虚拟机会查看 HandlePromotionFailure 设置值是否允许担保失败。如果允许，那么会继续检查老年代最大可用连续空间是否大于历次晋升到老年代对象的平均大小，如果大于则进行 Minor GC，否则可能进行一次 Full GC。</p><p><strong>4、Stop The World</strong></p><p>如果老年代满了，会触发 Full GC, Full GC 会同时回收新生代和老年代（即对整个堆进行GC），它会导致 Stop The World（简称 STW）,造成挺大的性能开销。</p><p>什么是 STW ？所谓的 STW, 即在 GC（minor GC 或 Full GC）期间，只有垃圾回收器线程在工作，其他工作线程则被挂起。</p><p><img src="780.png" alt="img"></p><p><em>画外音：为啥在垃圾收集期间其他工作线程会被挂起？想象一下，你一边在收垃圾，另外一群人一边丢垃圾，垃圾能收拾干净吗。</em></p><p>一般 Full GC 会导致工作线程停顿时间过长（因为Full GC 会清理<strong>整个堆</strong>中的不可用对象，一般要花较长的时间），如果在此 server 收到了很多请求，则会被拒绝服务！所以我们要尽量减少 Full GC（Minor GC 也会造成 STW,但只会触发轻微的 STW,因为 Eden 区的对象大部分都被回收了，只有极少数存活对象会通过复制算法转移到 S0 或 S1 区，所以相对还好）。</p><p>现在我们应该明白把新生代设置成 Eden, S0，S1区或者给对象设置年龄阈值或者默认把新生代与老年代的空间大小设置成 1:2 都是为了<strong>尽可能地避免对象过早地进入老年代，尽可能晚地触发 Full GC</strong>。想想新生代如果只设置 Eden 会发生什么，后果就是每经过一次 Minor GC，存活对象会过早地进入老年代，那么老年代很快就会装满，很快会触发 Full GC，而对象其实在经过两三次的 Minor GC 后大部分都会消亡，所以有了 S0,S1的缓冲，只有少数的对象会进入老年代，老年代大小也就不会这么快地增长，也就避免了过早地触发 Full GC。</p><p>由于 Full GC（或Minor GC） 会影响性能，所以我们要在一个合适的时间点发起 GC，这个时间点被称为 Safe Point，这个时间点的选定既不能太少以让 GC 时间太长导致程序过长时间卡顿，也不能过于频繁以至于过分增大运行时的负荷。一般当线程在这个时间点上状态是可以确定的，如确定 GC Root 的信息等，可以使 JVM 开始安全地 GC。Safe Point 主要指的是以下特定位置：</p><ul><li>循环的末尾</li><li>方法返回前</li><li>调用方法的 call 之后</li><li>抛出异常的位置 另外需要注意的是由于新生代的特点（大部分对象经过 Minor GC后会消亡）， Minor GC 用的是复制算法，而在老生代由于对象比较多，占用的空间较大，使用复制算法会有较大开销（复制算法在对象存活率较高时要进行多次复制操作，同时浪费一半空间）所以根据老生代特点，在老年代进行的 GC 一般采用的是标记整理法来进行回收。</li></ul><h2 id="垃圾收集器种类"><a href="#垃圾收集器种类" class="headerlink" title="垃圾收集器种类"></a>垃圾收集器种类</h2><p>如果说收集算法是内存回收的方法论，那么垃圾收集器就是内存回收的具体实现。Java 虚拟机规范并没有规定垃圾收集器应该如何实现，因此一般来说不同厂商，不同版本的虚拟机提供的垃圾收集器实现可能会有差别，一般会给出参数来让用户根据应用的特点来组合各个年代使用的收集器，主要有以下垃圾收集器</p><p><img src="790.png" alt="img"></p><ul><li>在新生代工作的垃圾回收器：Serial, ParNew, ParallelScavenge</li><li>在老年代工作的垃圾回收器：CMS，Serial Old, Parallel Old</li><li>同时在新老生代工作的垃圾回收器：G1</li></ul><p>图片中的垃圾收集器如果存在连线，则代表它们之间可以配合使用，接下来我们来看看各个垃圾收集器的具体功能。</p><h3 id="新生代收集器"><a href="#新生代收集器" class="headerlink" title="新生代收集器"></a>新生代收集器</h3><h4 id="Serial-收集器"><a href="#Serial-收集器" class="headerlink" title="Serial 收集器"></a>Serial 收集器</h4><p>Serial 收集器是工作在新生代的，单线程的垃圾收集器，单线程意味着它只会使用一个 CPU 或一个收集线程来完成垃圾回收，不仅如此，还记得我们上文提到的 STW 了吗，它在进行垃圾收集时，其他用户线程会暂停，直到垃圾收集结束，也就是说在 GC 期间，此时的应用不可用。</p><p>看起来单线程垃圾收集器不太实用，不过我们需要知道的任何技术的使用都不能脱离场景，在 <strong>Client 模式</strong>下，它简单有效（与其他收集器的单线程比），对于限定单个 CPU 的环境来说，Serial 单线程模式无需与其他线程交互，减少了开销，专心做 GC 能将其单线程的优势发挥到极致，另外在用户的桌面应用场景，分配给虚拟机的内存一般不会很大，收集几十甚至一两百兆（仅是新生代的内存，桌面应用基本不会再大了），STW 时间可以控制在一百多毫秒内，只要不是频繁发生，这点停顿是可以接受的，所以对于运行在 Client 模式下的虚拟机，Serial 收集器是新生代的默认收集器</p><h4 id="ParNew-收集器"><a href="#ParNew-收集器" class="headerlink" title="ParNew 收集器"></a>ParNew 收集器</h4><p>ParNew 收集器是 Serial 收集器的多线程版本，除了使用多线程，其他像收集算法,STW,对象分配规则，回收策略与 Serial 收集器完成一样，在底层上，这两种收集器也共用了相当多的代码，它的垃圾收集过程如下<img src="800.png" alt="img"></p><p>ParNew 主要工作在 Server 模式，我们知道服务端如果接收的请求多了，响应时间就很重要了，多线程可以让垃圾回收得更快，也就是减少了 STW 时间，能提升响应时间，所以是许多运行在 Server 模式下的虚拟机的首选新生代收集器，另一个与性能无关的原因是因为除了 Serial  收集器，<strong>只有它能与 CMS 收集器配合工作</strong>，CMS 是一个划时代的垃圾收集器，是真正意义上的<strong>并发收集器</strong>，它第一次实现了垃圾收集线程与用户线程（基本上）同时工作，它采用的是传统的 GC 收集器代码框架，与 Serial,ParNew 共用一套代码框架，所以能与这两者一起配合工作，而后文提到的 Parallel Scavenge 与 G1 收集器没有使用传统的 GC 收集器代码框架，而是另起炉灶独立实现的，另外一些收集器则只是共用了部分的框架代码,所以无法与 CMS 收集器一起配合工作。</p><p>在多 CPU 的情况下，由于 ParNew 的多线程回收特性，毫无疑问垃圾收集会更快，也能有效地减少 STW 的时间，提升应用的响应速度。</p><h4 id="Parallel-Scavenge-收集器"><a href="#Parallel-Scavenge-收集器" class="headerlink" title="Parallel Scavenge 收集器"></a>Parallel Scavenge 收集器</h4><p>Parallel Scavenge 收集器也是一个使用<strong>复制算法</strong>，<strong>多线程</strong>，工作于新生代的垃圾收集器，看起来功能和 ParNew 收集器一样，它有啥特别之处吗</p><p><strong>关注点不同</strong>，CMS 等垃圾收集器关注的是尽可能缩短垃圾收集时用户线程的停顿时间，而 Parallel Scavenge 目标是达到一个可控制的吞吐量（吞吐量 = 运行用户代码时间 / （运行用户代码时间+垃圾收集时间）），也就是说 CMS 等垃圾收集器更适合用到与用户交互的程序，因为停顿时间越短，用户体验越好，而 Parallel Scavenge 收集器关注的是吞吐量，所以更适合做后台运算等不需要太多用户交互的任务。</p><p>Parallel Scavenge 收集器提供了两个参数来精确控制吞吐量，分别是控制最大垃圾收集时间的 -XX:MaxGCPauseMillis 参数及直接设置吞吐量大小的 -XX:GCTimeRatio（默认99%）</p><p>除了以上两个参数，还可以用 Parallel Scavenge 收集器提供的第三个参数 -XX:UseAdaptiveSizePolicy，开启这个参数后，就不需要手工指定新生代大小,Eden 与 Survivor 比例（SurvivorRatio）等细节，只需要设置好基本的堆大小（-Xmx 设置最大堆）,以及最大垃圾收集时间与吞吐量大小，虚拟机就会根据当前系统运行情况收集监控信息，动态调整这些参数以尽可能地达到我们设定的最大垃圾收集时间或吞吐量大小这两个指标。自适应策略也是 Parallel Scavenge  与 ParNew 的重要区别！</p><h3 id="老年代收集器"><a href="#老年代收集器" class="headerlink" title="老年代收集器"></a>老年代收集器</h3><h4 id="Serial-Old-收集器"><a href="#Serial-Old-收集器" class="headerlink" title="Serial Old 收集器"></a>Serial Old 收集器</h4><p>上文我们知道， Serial 收集器是工作于新生代的单线程收集器，与之相对地，Serial Old 是工作于老年代的单线程收集器，此收集器的主要意义在于给 Client 模式下的虚拟机使用，如果在 Server 模式下，则它还有两大用途：一种是在 JDK 1.5 及之前的版本中与 Parallel Scavenge 配合使用，另一种是作为 CMS 收集器的后备预案,在并发收集发生 Concurrent Mode Failure 时使用（后文讲述）,它与 Serial 收集器配合使用示意图如下</p><p><img src="810.png" alt="img"></p><h4 id="Parallel-Old-收集器"><a href="#Parallel-Old-收集器" class="headerlink" title="Parallel Old 收集器"></a>Parallel Old 收集器</h4><p>Parallel Old 是相对于 Parallel Scavenge 收集器的老年代版本，使用多线程和标记整理法，两者组合示意图如下,这两者的组合由于都是多线程收集器，真正实现了「吞吐量优先」的目标</p><p><img src="820.png" alt="img"></p><h4 id="CMS-收集器"><a href="#CMS-收集器" class="headerlink" title="CMS 收集器"></a>CMS 收集器</h4><p>CMS 收集器是以实现最短 STW 时间为目标的收集器，如果应用很重视服务的响应速度，希望给用户最好的体验，则 CMS 收集器是个很不错的选择！</p><p>我们之前说老年代主要用标记整理法，而 CMS 虽然工作于老年代，但采用的是标记清除法，主要有以下四个步骤</p><ol><li>初始标记</li><li>并发标记</li><li>重新标记</li><li>并发清除</li></ol><p><img src="830.png" alt="img"></p><p>从图中可以的看到初始标记和重新标记两个阶段会发生 STW，造成用户线程挂起，不过初始标记仅标记 GC Roots 能关联的对象，速度很快，并发标记是进行 GC Roots  Tracing 的过程，重新标记是为了修正并发标记期间因用户线程继续运行而导致标记产生变动的那一部分对象的标记记录，这一阶段停顿时间一般比初始标记阶段稍长，但<strong>远比并发标记时间短</strong>。</p><p>整个过程中耗时最长的是并发标记和标记清理，不过这两个阶段用户线程都可工作，所以不影响应用的正常使用，所以总体上看，可以认为 CMS 收集器的内存回收过程是与用户线程一起并发执行的。</p><p>但是 CMS 收集器远达不到完美的程度，主要有以下三个缺点</p><ul><li>CMS 收集器对 CPU 资源非常敏感  原因也可以理解，比如本来我本来可以有 10 个用户线程处理请求，现在却要分出 3 个作为回收线程，吞吐量下降了30%，CMS 默认启动的回收线程数是 （CPU数量+3）/ 4, 如果 CPU 数量只有一两个，那吞吐量就直接下降 50%,显然是不可接受的</li><li>CMS 无法处理浮动垃圾（Floating Garbage）,可能出现 「Concurrent Mode Failure」而导致另一次 Full GC 的产生，由于在并发清理阶段用户线程还在运行，所以清理的同时新的垃圾也在不断出现，这部分垃圾只能在下一次 GC 时再清理掉（即浮云垃圾），同时在垃圾收集阶段用户线程也要继续运行，就需要预留足够多的空间要确保用户线程正常执行，这就意味着 CMS 收集器不能像其他收集器一样等老年代满了再使用，JDK 1.5 默认当老年代使用了68%空间后就会被激活，当然这个比例可以通过 -XX:CMSInitiatingOccupancyFraction 来设置，但是如果设置地太高很容易导致在 CMS 运行期间预留的内存无法满足程序要求，会导致 <strong>Concurrent Mode Failure</strong> 失败，这时会启用 Serial Old 收集器来重新进行老年代的收集，而我们知道 Serial Old 收集器是单线程收集器，这样就会导致 STW 更长了。</li><li>CMS 采用的是标记清除法，上文我们已经提到这种方法会产生大量的内存碎片，这样会给大内存分配带来很大的麻烦，如果无法找到足够大的连续空间来分配对象，将会触发 Full GC，这会影响应用的性能。当然我们可以开启 -XX:+UseCMSCompactAtFullCollection（默认是开启的），用于在 CMS 收集器顶不住要进行 FullGC 时开启内存碎片的合并整理过程，内存整理会导致 STW，停顿时间会变长，还可以用另一个参数 -XX:CMSFullGCsBeforeCompation 用来设置执行多少次不压缩的 Full GC 后跟着带来一次带压缩的。</li></ul><h4 id="G1（Garbage-First）-收集器"><a href="#G1（Garbage-First）-收集器" class="headerlink" title="G1（Garbage First） 收集器"></a>G1（Garbage First） 收集器</h4><p>G1 收集器是面向服务端的垃圾收集器，被称为驾驭一切的垃圾回收器，主要有以下几个特点</p><ul><li><p>像 CMS 收集器一样，能与应用程序线程并发执行。</p></li><li><p>整理空闲空间更快。</p></li><li><p>需要 GC 停顿时间更好预测。</p></li><li><p>不会像 CMS 那样牺牲大量的吞吐性能。</p></li><li><p>不需要更大的 Java Heap</p></li></ul><p>与 CMS 相比，它在以下两个方面表现更出色</p><ol><li>运作期间不会产生内存碎片，G1 从整体上看采用的是标记-整理法，局部（两个 Region）上看是基于复制算法实现的，两个算法都不会产生内存碎片，收集后提供规整的可用内存，这样有利于程序的长时间运行。</li><li>在 STW 上建立了<strong>可预测</strong>的停顿时间模型，用户可以指定期望停顿时间，G1 会将停顿时间控制在用户设定的停顿时间以内。</li></ol><p>为什么G1能建立可预测的停顿模型呢，主要原因在于 G1 对堆空间的分配与传统的垃圾收集器不一器，传统的内存分配就像我们前文所述，是连续的，分成新生代，老年代，新生代又分 Eden,S0,S1,如下</p><p><img src="840.png" alt="img"><br>而 G1 各代的存储地址不是连续的，每一代都使用了 n 个不连续的大小相同的 Region，每个Region占有一块连续的虚拟内存地址，如图示</p><p><img src="850.png" alt="img"><br>除了和传统的新老生代，幸存区的空间区别，Region还多了一个H，它代表Humongous，这表示这些Region存储的是巨大对象（humongous object，H-obj），即大小大于等于region一半的对象，这样超大对象就直接分配到了老年代，防止了反复拷贝移动。那么 G1 分配成这样有啥好处呢？</p><p>传统的收集器如果发生 Full GC 是对整个堆进行全区域的垃圾收集，而分配成各个 Region 的话，方便 G1 跟踪各个 Region 里垃圾堆积的价值大小（回收所获得的空间大小及回收所需经验值），这样根据价值大小维护一个优先列表，根据允许的收集时间，优先收集回收价值最大的 Region,也就避免了整个老年代的回收，也就减少了 STW 造成的停顿时间。同时由于只收集部分 Region,可就做到了 STW 时间的可控。</p><p>G1 收集器的工作步骤如下</p><ol><li>初始标记</li><li>并发标记</li><li>最终标记</li><li>筛选回收</li></ol><p><img src="860.png" alt="img"></p><p>可以看到整体过程与 CMS 收集器非常类似，筛选阶段会根据各个 Region 的回收价值和成本进行排序，根据用户期望的 GC 停顿时间来制定回收计划。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
            <tag> GC </tag>
            
            <tag> 垃圾回收 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>那些年我们学过的设计模式，你还记得几个（一）</title>
      <link href="2020/09/25/%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E4%BB%AC%E5%AD%A6%E8%BF%87%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%8C%E4%BD%A0%E8%BF%98%E8%AE%B0%E5%BE%97%E5%87%A0%E4%B8%AA%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>2020/09/25/%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E4%BB%AC%E5%AD%A6%E8%BF%87%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%8C%E4%BD%A0%E8%BF%98%E8%AE%B0%E5%BE%97%E5%87%A0%E4%B8%AA%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>最近在忙着面试，趁着没工作的空闲期，想把设计模式好好整理一遍。话不多说，我们直接上第一个设计模式—-<code>单例模式</code></p><h2 id="什么是单例模式"><a href="#什么是单例模式" class="headerlink" title="什么是单例模式"></a>什么是单例模式</h2><p>这也是面试时面试官经常问我的问题，什么是单例模式？脑海中是不是立即浮现出两种单例模式。然后准备滔滔不绝的说给面试官听？面试官在问我们这个问题的时候，我们最好不要答非所问。最好根据单例模式的定义去正面回答面试官。</p><p>单例模式是指在内存中只会创建且仅创建一次对象的设计模式。在程序中多次使用同一个对象且作用相同时，为了防止频繁地创建对象使得内存飙升，单例模式可以让程序仅在内存中创建一个对象，让所有需要调用的地方都共享这一单例对象。</p><p><img src="dlms1.jpg" alt="单例模式定义"></p><h2 id="单例模式创建类型"><a href="#单例模式创建类型" class="headerlink" title="单例模式创建类型"></a>单例模式创建类型</h2><ul><li><p><code>懒汉式</code>：在被程序第一次调用的时候才初始化该单例对象</p></li><li><p><code>饿汉式</code>：在类加载的时候就已经创建好该单例对象</p></li></ul><h3 id="懒汉式创建单例对象"><a href="#懒汉式创建单例对象" class="headerlink" title="懒汉式创建单例对象"></a>懒汉式创建单例对象</h3><p>懒汉式只在程序第一次调用的时候创建对象，所以需要调用的时候需要判断是否已经实例化该对象，如果未实例化，则实例化该对象。</p><p><img src="lhs.png" alt="懒汉式"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazySingleTon</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LazySingleTon singleTon;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazySingleTon</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LazySingleTon <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(singleTon==<span class="keyword">null</span>)&#123;</span><br><span class="line">            singleTon = <span class="keyword">new</span> LazySingleTon();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleTon;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后面再讲这段代码的优化，我们先来看第二种单例模式的实现。</p><h3 id="饿汉式创建单例对象"><a href="#饿汉式创建单例对象" class="headerlink" title="饿汉式创建单例对象"></a>饿汉式创建单例对象</h3><p>饿汉式在类加载的时候就已经初始化好该对象，后续程序调用的都是该对象。</p><p><img src="ehs.png" alt="饿汉式"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HungrySingleTon</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> HungrySingleTon singleTon = <span class="keyword">new</span> HungrySingleTon();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">HungrySingleTon</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HungrySingleTon <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> singleTon;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样类在加载时会在堆内存中创建一个HungrySingleTon对象，当类被卸载时，HungrySingleTon对象也就会被随之死亡了。</p><h3 id="懒汉式代码如何优化"><a href="#懒汉式代码如何优化" class="headerlink" title="懒汉式代码如何优化"></a>懒汉式代码如何优化</h3><p>因为上述懒汉式的实现并不能保证在多线程环境下，对象只被创建一次的问题。因此存在一个线程安全的问题。我们回顾一下上面懒汉式创建的主要函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LazySingleTon <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(singleTon==<span class="keyword">null</span>)&#123;</span><br><span class="line">            singleTon = <span class="keyword">new</span> LazySingleTon();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleTon;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果同时存在多个线程，线程1在判断了<code>singleTon==null</code>后让出了cpu的使用权，而线程二这时候获取到了cpu的使用权，也判断了一次<code>singleTon==null</code>那么线程2就会执行<code>singleTon = new LazySingleTon()</code>,当线程1重新获取到cpu的使用权之后，因为他刚判断了<code>singleTon</code>是null，所以线程1也会创建一个LazySingleTon的实例。所以就存在了<code>线程安全</code>的问题。</p><hr><p>我们最容易想到的办法就是加锁，给类对象加锁或者给方法加锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给方法加锁</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> LazySingleTon <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(singleTon==<span class="keyword">null</span>)&#123;</span><br><span class="line">singleTon = <span class="keyword">new</span> LazySingleTon();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> singleTon;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//给类对象加锁</span></span><br><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">static</span> LazySingleTon <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span>(<span class="keyword">this</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(singleTon==<span class="keyword">null</span>)&#123;</span><br><span class="line">singleTon = <span class="keyword">new</span> LazySingleTon();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> singleTon;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但上面两种方法都存在一个问题，在获取对象之前都要先获取锁，所以并发性能就显得尤其的低下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> LazySingleTon <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(singleTon ==<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">synchronized</span> (LazySingleTon<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (singleTon == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    singleTon = <span class="keyword">new</span> LazySingleTon();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> singleTon;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的实现方式，就完美的解决了性能低下和锁资源的问题。</p><ul><li><strong>line2:</strong>当singleTon已经被实例化的时候,直接返回对象，不再获取锁资源</li><li><strong>line3</strong>:当多个线程进入第一个if时，施加同步锁，每次仅允许一个线程进去当前代码块。</li><li><strong>line4</strong>:锁内再次进行判断，因为多个线程抢夺一个资源时只有一个获取到，后进入的线程所要获取的对象已经被第一个线程实例化过。所以需要再次判断。</li></ul><p>这就是典型的DCL型懒汉单例，<code>Double Check and Lock</code>双重校验加锁。但是我们在写DCL的时候都会加入<code>volatile</code>关键词修饰singleTon。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazySingleTon</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> LazySingleTon singleTon;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazySingleTon</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LazySingleTon <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(singleTon ==<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">synchronized</span> (LazySingleTon<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (singleTon == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    singleTon = <span class="keyword">new</span> LazySingleTon();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> singleTon;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原因是因为JVM在创建对象的时候，可以对指令进行重排序以提高程序性能。JVM在创建对象的时候，一般会经过以下三个步骤：</p><ul><li>分配内存空间</li><li>初始化对象</li><li>将对象指向分配好的内存空间</li></ul><p>但是在2和3的时候有可能出现指令重排。比如多个线程，当线程1执行了1-3而正在初始化对象，而线程2获取对象时，就获取到了一个未初始化的对象。就会出现空指针异常了。而volatile就是为了在JVM创建对象的时候进行<code>禁止指令重排</code>的。</p><h2 id="还有其他的形式吗"><a href="#还有其他的形式吗" class="headerlink" title="还有其他的形式吗"></a>还有其他的形式吗</h2><h3 id="静态内部类实现单例"><a href="#静态内部类实现单例" class="headerlink" title="静态内部类实现单例"></a>静态内部类实现单例</h3><p>静态内部类相对于DCL模式实现更简单，对<code>静态域</code>使用延迟初始化，应使用这种方式而不是双检锁方式。这种方式只适用于静态域的情况，双检锁方式可在<code>实例域</code>需要延迟初始化时使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleTon</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SingleTon INSTANCE = <span class="keyword">new</span> SingleTon();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingleTon</span> <span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> SingleTon <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="枚举类实现单例"><a href="#枚举类实现单例" class="headerlink" title="枚举类实现单例"></a>枚举类实现单例</h3><p>在JDK1.5中，java引入了枚举类型。枚举是实现单例模式的最佳方法。它更简洁，自动支持序列化机制，绝对防止多次实例化。这种方式是《 Effective Java》 作者 Josh Bloch 提倡的方式，它不仅能避免多线程同步问题，而且还自动支持序列化机制，防止反序列化重新创建新的对象。</p><p>优点不言而喻：</p><ul><li>实现更简单</li><li>天然的线程安全</li><li>可以防止反射、反序列化创建多个枚举对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton &#123;  </span><br><span class="line">    INSTANCE;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whateverMethod</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="破坏单例模式"><a href="#破坏单例模式" class="headerlink" title="破坏单例模式"></a>破坏单例模式</h2><p>枚举本身自带防止反射和反序列化的特性，那懒汉式和饿汉式又是如何被破坏的呢</p><h3 id="反射破坏单例模式"><a href="#反射破坏单例模式" class="headerlink" title="反射破坏单例模式"></a>反射破坏单例模式</h3><p>下面我们就可以用反射直接强制访问私有构造器，去创建实例对象破坏单例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 获取类的显式构造器</span></span><br><span class="line">    Constructor&lt;HungrySingleTon&gt; construct = HungrySingleTon<span class="class">.<span class="keyword">class</span>.<span class="title">getDeclaredConstructor</span>()</span>;</span><br><span class="line">    <span class="comment">// 可访问私有构造器</span></span><br><span class="line">    construct.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">// 利用反射构造新对象</span></span><br><span class="line">    HungrySingleTon obj1 = construct.newInstance();</span><br><span class="line">    <span class="comment">// 通过正常方式获取单例对象</span></span><br><span class="line">    HungrySingleTon obj2 = HungrySingleTon.getInstance();</span><br><span class="line">    System.out.println(obj1 == obj2); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那如何防止单例模式被反射破坏呢，因为反射是强制访问私有构造器，对于饿汉式，在类加载的时候对象已经初始化，所以我们可以在私有构造器对当前对象进行判断来规避反射破坏单例模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HungrySingleTon</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> HungrySingleTon singleTon = <span class="keyword">new</span> HungrySingleTon();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">HungrySingleTon</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(singleTon!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"禁止通过反射实例化对象"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HungrySingleTon <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> singleTon;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="序列化和反序列化破坏单例模式"><a href="#序列化和反序列化破坏单例模式" class="headerlink" title="序列化和反序列化破坏单例模式"></a>序列化和反序列化破坏单例模式</h3><p>下面是一个序列化和反序列化去破坏单例的例子，但是使用序列化和反序列化破坏单例时，单例对象的类必须实现Serializable接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HungrySingleTon</span> <span class="keyword">implements</span>  <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">// 创建输出流</span></span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"Singleton.file"</span>));</span><br><span class="line">        <span class="comment">// 将单例对象写到文件中</span></span><br><span class="line">        oos.writeObject(HungrySingleTon.getInstance());</span><br><span class="line">        <span class="comment">// 从文件中读取单例对象</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"Singleton.file"</span>);</span><br><span class="line">        ObjectInputStream ois =  <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(file));</span><br><span class="line">        HungrySingleTon newInstance = (HungrySingleTon) ois.readObject();</span><br><span class="line">        <span class="comment">// 判断是否是同一个对象</span></span><br><span class="line">        System.out.println(newInstance == HungrySingleTon.getInstance()); <span class="comment">// false</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> HungrySingleTon singleTon = <span class="keyword">new</span> HungrySingleTon();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">HungrySingleTon</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HungrySingleTon <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> singleTon;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>单例模式主要实现方式为懒汉式、饿汉式、静态内部类和枚举</li><li>大部分的单例模式可以被反射和序列化和反序列化破坏</li><li>我们可以通过人为干预来避免反射或系列化攻击</li><li>枚举自带天然的线程安全和单一实例以及防反射和防序列化和反序列破坏的特性</li><li>对于懒汉式最优雅的写法应该是DCL加volatile修饰</li><li>对内存要求高的时候我们可以选择<code>懒加载</code>的单例实现方式</li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 单例模式 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
